{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Best_Practices_Guide/","text":"Best Practices Guide Given below are the best practices to follow for different file types when updating your products. Following these best practices ensures a seamless update process and a lower number of merge conflicts. File Type Best Practices .jar files Do not modify the original .jar files. When updating your product, the WSO2 in-place tool replaces the existing .jar files with updated ones. If you modify the original .jar files, your customization will be lost. To avoid this, use an extension point as explained in Using Extension Points in Carbon and https://github.com/wso2-extensions. See https://store.wso2.com/store/pages/top-assets for a list of released connectors and extensions. .war files Do not modify .war files. It is not recommended to modify .war files. In case you have modified .war files in your distribution, after updating your product distribution, reapply your modifications in the updated .war files. .car files Do not modify the original .car files. In case your original product distribution contains .car files, do not modify them as they can be changed by continuous updates. .jag/.js files Maintain the same code indentation of the original .js files in the updated .js files. .jks files The in-place update tool doesn't update .jks files. .json files Maintain the same code indentation of the original .json files in the updated .json files. Else, there will be merge conflicts. ??? note \"Click to see example\" Shown below is the difference between a .json file before and after a modification. As shown, the indentation has changed in the updated file and this might result in a merge conflict in the WSO2 in-place update tool. Maintain the order of the .json file as much as possible. For example, when you add a new key-value pair, add it to the end of the file. ??? note \"Click to see example\" Shown below is the difference between a .json file before and after a modification. As shown, the new key-value pair is not added to the end of the file. As a result, line number 2 in the original file is not the same as the updated file, which will cause a merge conflict in the WSO2 in-place update tool. There will not be merge conflicts when the new line is added to the end of the file, preserving the original order:","title":"Best Practices Guide"},{"location":"Best_Practices_Guide/#best-practices-guide","text":"Given below are the best practices to follow for different file types when updating your products. Following these best practices ensures a seamless update process and a lower number of merge conflicts. File Type Best Practices .jar files Do not modify the original .jar files. When updating your product, the WSO2 in-place tool replaces the existing .jar files with updated ones. If you modify the original .jar files, your customization will be lost. To avoid this, use an extension point as explained in Using Extension Points in Carbon and https://github.com/wso2-extensions. See https://store.wso2.com/store/pages/top-assets for a list of released connectors and extensions. .war files Do not modify .war files. It is not recommended to modify .war files. In case you have modified .war files in your distribution, after updating your product distribution, reapply your modifications in the updated .war files. .car files Do not modify the original .car files. In case your original product distribution contains .car files, do not modify them as they can be changed by continuous updates. .jag/.js files Maintain the same code indentation of the original .js files in the updated .js files. .jks files The in-place update tool doesn't update .jks files. .json files Maintain the same code indentation of the original .json files in the updated .json files. Else, there will be merge conflicts. ??? note \"Click to see example\" Shown below is the difference between a .json file before and after a modification. As shown, the indentation has changed in the updated file and this might result in a merge conflict in the WSO2 in-place update tool. Maintain the order of the .json file as much as possible. For example, when you add a new key-value pair, add it to the end of the file. ??? note \"Click to see example\" Shown below is the difference between a .json file before and after a modification. As shown, the new key-value pair is not added to the end of the file. As a result, line number 2 in the original file is not the same as the updated file, which will cause a merge conflict in the WSO2 in-place update tool. There will not be merge conflicts when the new line is added to the end of the file, preserving the original order:","title":"Best Practices Guide"},{"location":"Developer_Guide/","text":"Developer Guide The WSO2 Update Creator tool (wum-uc) is designed to help you create and validate updates that are compatible with WUM. It is written in GO language. As a result, you can compile the code directly to machine code without using the JVM. Cross compiling is also possible. This document describes how to use the Update Creator tool to create an update directly or convert a patch to an update. Before you begin, here are the descriptions of the files used in this guide. The wum-uc tool generates both these files. {.expand-control-image}update-descriptor3.yaml file This is a newly introduced file that contains details about the update that complies with WUM 3.0.0 . Every update has an update-descriptor3.yaml file. It has details about the products that this update is fully or partially compatible with, the file changes (added, removed, or modified), descriptions, and instructions. A sample file looks like the following: update_number: 2922 platform_version: 4.4.0 platform_name: wilkes md5sum: 8f6e83731d c1da6634c6d24c92606d06 description: | Details about the update for wso2am - 2.1.0 . standard Details about the update for wso2am - 2.0.0 . standard Details about the update for wso2esb - 5.0.0 . standard Details about the update for wso2is - km - 5.3.0 . standard instructions: | Instructions for wso2am - 2.1.0 . standard Instructions for wso2am - 2.0.0 . standard Instructions for wso2esb - 5.0.0 . standard Instructions for wso2is - km - 5.3.0 . standard bug_fixes: JIRA_ID : Summary compatible_products: - product_name : wso2am product_version : 2.1.0 . standard added_files : [] removed_files : - repository / components / plugins / org . wso2 . carbon . governance . lcm_4 .7.0 . jar modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar partially_applicable_products: - product_name : wso2am product_version : 2.0.0 . standard added_files : [] removed_files : [] modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar - product_name : wso2esb product_version : 5.0.0 . standard added_files : [] removed_files : [] modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - product_name : wso2is - km product_version : 5.3.0 . standard added_files : [] removed_files : [] modified_files : - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar In WUM 2.0.0, we used update-descriptor.yaml . The reason to introduce a new file in WUM 3.0.0 is because WUM 3.0.0 s upports partial updates. For example, in the above sample, the update numbered 2922 gets fully applied to wso2am-2.1.0.standard product while it gets partially applied to wso2am- 2.0.0.standard , wso2esb-5.0.0.standard, and wso2is-km-5.3.0.standard products. You should manually fill in the description, instructions, and the bug_fixes fields of the update-descriptor3.yaml file according to the products listed in it. W hen filling the description and instructions sections of an update that gets fully or partially applied to multiple products, use paragraphs to separate the description per product. Be careful not to break the initial indentation though as that results in a malformed YAML. Given below is an example of a description that has multiple paragraphs: description: | Details about the update for wso2am - 2.1.0 . standard , this paragraph only contains details regarding wso2am - 2.1.0 . standard Details about the update for wso2am - 2.0.0 . standard , this paragraph only contains details regarding wso2am - 2.0.0 . standard Details about the update for wso2esb - 5.0.0 . standard , this paragraph only contains details regarding wso2esb - 5.0.0 . standard Details about the update for wso2is - km - 5.3.0 . standard , this paragraph only contains details regarding wso2is - km - 5.3.0 . standard Here's an example of a malformed YAML. The malformation is caused by YAML treating the entire sentence 'Details about the update for wso2am-2.0.0.standard, this paragraph only contains details regarding wso2am-2.0.0.standard' as a key. The same applies to the instructions field as well. description: | Details about the update for wso2am - 2.1.0 . standard , this paragraph only contains details regarding wso2am - 2.1.0 . standard Details about the update for wso2am - 2.0.0 . standard , this paragraph only contains details regarding wso2am - 2.0.0 . standard If there are no bug fixes, enter N/A in the JIRA_ID and Summary fields. I f there are no instructions, leave a blank line as follows: {width=\"150\"} Note that you do not manually modify the added_files and modified_files sections like in the previous versions of the tool. They are added automatically by the tool. In cases where the version of a JAR file is updated, remove the old JAR file and provide path to the removed file when prompted by the wum-uc tool . {.expand-control-image}update-descriptor.yaml file This file will be discontinued when WUM 2.0.0 gets deprecated. The update-descriptor.yaml file is used to identify update details by WUM 2.0.0. It will get created by the wum-uc tool along with the previous YAML file until wum 2.0.0 gets deprecated. You will be prompted to provide inputs for applies_to, bug_fixes, and description fields. Given below is a sample update-descriptor.yaml file: update_number: 2922 platform_version: 4.4.0 platform_name: wilkes applies_to: wso2das - 3.1.0 bug_fixes: JIRA_ID : Summary description: Details about the update for wso2das - 3.1.0 file_changes: added_files : [] removed_files : - repository / components / plugins / org . wso2 . carbon . governance . lcm_4 .7.0 . jar modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar If there are no bug fixes, enter N/A in the JIRA_ID and Summary fields. Let's start using the Update Creator tool. Download the tool Set the environment variables Build the tool (optional) Initialize the tool Create an update directly Commit the created ZIP file to SVN Convert old patches to WUM-updates Download the tool Go to the release section of GitHub to download the tool. Set the environment variables If you want to run the tool from anywhere, add it to the system PATH variable. For example, this is the command for Ubuntu: export PATH = $PATH :[ ENTER_PATH_TO_BIN_HERE ] Set the LICENSE_MD5 environment variable: LICENSE_MD5 = 84 d7cad403ae420940cd0f62bec1b520 Build the tool (optional) Follow the steps below if you want to built the tool yourself. Download GO from its official website and install it. You need GO to compile and run this tool. Run the following command to download and install the packages along with their dependencies: go get - u github . com / wso2 / update - creator - tool Open the update-creator-tool/constant/constants.go file of the cloned repository and replace the value of the constant BASE64_ENCODED_CONSUMER_KEY_AND_SECRET with the following: BASE64_ENCODED_CONSUMER_KEY_AND_SECRET = N01ENDRMM21HcVhrOTlXTDM2N19na1lPNTgwYTpVaEQxSzlwbzVDUF9BaExLUFhUS3Bqc0FMbU1h Run build.sh to generate the executable files for various OS/architecture combinations. These files are located in the build/target/ directory. Extract the relevant ZIP file to your OS/architecture. Find the executable wum-uc file in the bin directory. Initialize the tool Run the following command to initialize wum-uc: wum - uc init When prompted, give your WSO2 username and password. Note that the .wum-uc directory is created. Let's call it in this guide. Create an update directly Follow below steps to create an update. Create a directory (let's call this ) and copy the following files that need to be in your update: All updated files (e.g., binary and resource files). The instructions.txt (required only till WUM 2.0 gets depreciated). Note : Do not copy LICENSE.txt and NOT_A_CONTRIBUTION.txt as they get automatically added bythe tool. Run the following command to create the update: wum - uc create update_dir dist_loc // update_dir : the path to UPDATE_LOCATION // dist_loc : path to the latest WUM-updated distribution that you obtained by pointing WUM to the live environment (i.e., url: https://api.updates.wso2.com ) Give the relevant update number when prompted. When prompted, select the relevant platform version that you are creating the update for. Select the platform name and version from following : 1. wilkes 4.4.0 2. hamming 5.0.0 Enter your preference [ 1 / 2 ]: When prompted for removed files: Press 'n' if no files are removed from this update. Press 'y' for adding removed files and enter the path of the removed files relative to . When you are done with adding removed files, press 'Enter' without any inputs. When prompted, confirm that you are done adding inputs by pressing 'y' for yes or 'n' for no. Enter the following when prompted. Note that these are required only until WUM 2.0 gets depreciated. The names of product/s for the 'applies to' field. The JIRA keys and summaries relevant to the update. (Press 'Enter' when you are done). The description for the created update. Note that the update ZIP is created in the location from where you execute wum-uc. The tool displays a summary of the update creation. {.expand-control-image}Click to see an example... Here's an example: update - descriptor . yaml has been successfully created in / home / kasun / Documents / wum - uc / demo . Optional resource file instructions . txt not copied . update - descriptor3 . yaml has been successfully created in / home / kasun / Documents / wum - uc / demo . WSO2 - CARBON - UPDATE - 4.4.0 - 2923. zip successfully created . Your update applies to the following products Compatible products : [ wso2am ] Partially applicable products : [ wso2esb wso2is - km wso2am ] Notify products : [ wso2ei wso2iot ] Manually fill the description , instructions and bug_fixes fields for above products in the update - descriptor3 . yaml located inside the created WSO2 - CARBON - UPDATE - 4.4.0 - 2923. zip As shown in the Notify products field of the above summary, the update can be applied to the products wso2ei and wso2iot as well. However, due to the differences in the directory structures of the above products, it is the responsibility of the developer to create seperate updates for them in the Notify products field. Commit the created ZIP file to SVN Before commiting the file, do a manual inspection of its directory structure and the entries in the update-descriptor3.yaml and update-descriptor.yaml files. For Wilkes, the update repository location is https://svn.wso2.com/wso2/custom/projects/projects/carbon/wilkes/updates . When changing the lifecycle state of the created update from Development to Staging, you see a newly added check as follows. Click it. {width=\"200\"} You get directed to a seperate page as follows: Click GET UPDATE YAML to see the YAML information as follows: {width=\"500\"} Verify the YAML information and click GET PRODUCT LIST to see the product details as follows: {width=\"550\"} Verify the product details and click CONTINUE. You get a page as follows. Update it with the products relevant for your update number. {width=\"600\"} Some samples for the UPDATE_LOCATION directory are shown below: {.expand-control-image}Sample 1 \u251c\u2500\u2500 axis2_1 .6.1 . wso2v16 . jar \u251c\u2500\u2500 instructions . txt \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 synapse - core_2 .1.5 . wso2v2 . jar \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml {.expand-control-image}Sample 2 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 oauth2 . war \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml {.expand-control-image}Sample 3 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 org . wso2 . carbon . apimgt . hostobjects_5 .0.3 . jar \u251c\u2500\u2500 store \u2502 \u251c\u2500\u2500 modules \u2502 \u2502 \u2514\u2500\u2500 subscription \u2502 \u2502 \u251c\u2500\u2500 list . jag \u2502 \u2502 \u2514\u2500\u2500 module . jag \u2502 \u2514\u2500\u2500 site \u2502 \u2514\u2500\u2500 blocks \u2502 \u2514\u2500\u2500 subscription \u2502 \u2514\u2500\u2500 subscription - list \u2502 \u251c\u2500\u2500 ajax \u2502 \u2502 \u2514\u2500\u2500 subscription - list . jag \u2502 \u2514\u2500\u2500 block . jag \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml {.expand-control-image}Sample 4 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 tomcat - juli - 7.0.69 . jar \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 endorsed \u2502 \u2514\u2500\u2500 tomcat - annotations - api - 7.0.69 . jar \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 org . wso2 . carbon . tomcat_4 .4.3 . jar \u251c\u2500\u2500 tomcat_7 .0.59 . wso2v3 . jar \u251c\u2500\u2500 tomcat - catalina - ha_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - el - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - jsp - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - servlet - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml Convert old patches to WUM-updates Sample 1: Basic scenario Sample 2: Update with resource files Sample 3: When the patch has config changes Sample 1: Basic scenario Let's convert the WSO2-CARBON-PATCH-4.4.0\u20130001.zip to the WUM update format. Extract the WSO2-CARBON-PATCH-4.4.0\u20130001.zip . We call this location PatchDir . Note that the structure of the is as follows: PatchDir \u2514\u2500\u2500 WSO2 - CARBON - PATCH - 4.4.0 \u2013 0001 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 patch0001 \u2502 \u2514\u2500\u2500 hazelcast_3 .5.0 . wso2v1 . jar \u251c\u2500\u2500 README . txt \u2514\u2500\u2500 wso2carbon - version . txt All the file changes are in PatchDir /WSO2-CARBON-PATCH-4.4.0\u20130001/patch0001 . Copy the content of the patch0001 directory to WSO2-CARBON-PATCH-4.4.0\u20130001 directory (parent directory of patch0001 directory) and delete patch0001 directory. Delete wso2carbon-version.txt, LICENSE.txt, and NOT_A_CONTRIBUTION.txt files from the above directory. Note that the new directory structure looks as follows: \u2500\u2500 WSO2 - CARBON - PATCH - 4.4.0 \u2013 0001 \u251c\u2500\u2500 hazelcast_3 .5.0 . wso2v1 . jar \u251c\u2500\u2500 README . txt Follow the update creation process mentioned above to create the update. Note that if successful, the c reated WSO2-CARBON-UPDATE-4.4.0\u20130001.zip should be located at the current working directory. You can validate this using the wum-uc validate command. Sample 2: Update with resource files Follow the steps below to convert WSO2-CARBON-PATCH-4.4.0\u20130237.zip to WUM update format. Extract the WSO2-CARBON-PATCH-4.4.0\u20130237.zip file. We call this location . Note that the structure of the is as follows. Read the README.txt for more information about the patch. WSO2 - CARBON - PATCH - 4.4.0 - 0237 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 tomcat - juli - 7.0.69 . jar \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 endorsed \u2502 \u2514\u2500\u2500 tomcat - annotations - api - 7.0.69 . jar \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 patch0237 \u2502 \u251c\u2500\u2500 org . wso2 . carbon . tomcat_4 .4.1 . jar \u2502 \u251c\u2500\u2500 tomcat_7 .0.59 . wso2v3 . jar \u2502 \u251c\u2500\u2500 tomcat - catalina - ha_7 .0.59 . wso2v1 . jar \u2502 \u251c\u2500\u2500 tomcat - el - api_7 .0.59 . wso2v1 . jar \u2502 \u251c\u2500\u2500 tomcat - jsp - api_7 .0.59 . wso2v1 . jar \u2502 \u2514\u2500\u2500 tomcat - servlet - api_7 .0.59 . wso2v1 . jar \u2514\u2500\u2500 README . txt Move the content of the patch0237 directory to the WSO2-CARBON-PATCH-4.4.0\u20130237 directory and delete patch0237 . Delete the LICENSE.txt file from the WSO2-CARBON-PATCH-4.4.0\u20130237 directory. Note that the new directory structure should as follows: WSO2 - CARBON - PATCH - 4.4.0 - 0237 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 tomcat - juli - 7.0.69 . jar \u251c\u2500\u2500 instructions . txt \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 endorsed \u2502 \u2514\u2500\u2500 tomcat - annotations - api - 7.0.69 . jar \u251c\u2500\u2500 org . wso2 . carbon . tomcat_4 .4.1 . jar \u251c\u2500\u2500 README . txt \u251c\u2500\u2500 tomcat_7 .0.59 . wso2v3 . jar \u251c\u2500\u2500 tomcat - catalina - ha_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - el - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - jsp - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - servlet - api_7 .0.59 . wso2v1 . jar Follow the update creation process mentioned above to create the update. Note that, if successful, the WSO2-CARBON-UPDATE-4.4.0\u20130237.zip file will be created in the current working directory. You can validate it using the wum-uc validate command. Sample 3: When the patch has config changes Follow the steps below to convert the WSO2-CARBON-PATCH-4.4.0\u20130478.zip file to new WUM update format when the patch has configuration changes. Extract the patch and move the content of the patch0478 directory to the parent directory. WSO2 - CARBON - PATCH - 4.4.0 - 047 8 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 README . txt \u251c\u2500\u2500 synapse - core_2 .1.5 . wso2v2 . jar \u2514\u2500\u2500 update - descriptor . yaml Note in the README.txt that there are configuration changes added in this patch. You need to add these instructions in an instructions.txt file until WUM 2.0 gets officially deprecated. After it is deprecated, same content above should be added to the instructions field of the new update-descriptor3.yaml file after successfully creating the update. {.expand-control-image}Expand to see a sample instructions.txt file... When the org . wso2 . carbon . identity . mgt . IdentityMgtEventListener is enabled via EventListeners configuration in repository / conf / identity / identity . xml , it engages CacheClearingUserOperationListener which clears the policy cache . This should be configurable through EventListeners configuration . This step is optional , and is only required if you need to disable the immediate cache invalidation . Copy following xml content into identity . xml as the very first element under the EventListeners element . EventListener type = org.wso2.carbon.user.core.listener.UserOperationEventListener name = org.wso2.carbon.identity.entitlement.listener.CacheClearingUserOperationListener orderId = 6 enable = false / Note that the new directory structure looks as follows: WSO2 - CARBON - PATCH - 4.4.0 - 047 8 \u251c\u2500\u2500 instructions . txt \u251c\u2500\u2500 README . txt \u2514\u2500\u2500 synapse - core_2 .1.5 . wso2v2 . jar Follow the update creation process mentioned above to create the update. Note that, if successful, the WSO2-CARBON-UPDATE-4.4.0\u20130478.zip file will be created in the current working directory. You can validated it using the wum-uc validate command. Attachments: {width=\"8\" height=\"8\"} overview-products.png (image/png) {width=\"8\" height=\"8\"} Product-details.png (image/png) {width=\"8\" height=\"8\"} get-updated-YAML.png (image/png) {width=\"8\" height=\"8\"} YAML-description.png (image/png) {width=\"8\" height=\"8\"} blank-line.png (image/png) {width=\"8\" height=\"8\"} image2018-8-10_17-37-18.png (image/png)","title":"Developer Guide"},{"location":"Developer_Guide/#developer-guide","text":"The WSO2 Update Creator tool (wum-uc) is designed to help you create and validate updates that are compatible with WUM. It is written in GO language. As a result, you can compile the code directly to machine code without using the JVM. Cross compiling is also possible. This document describes how to use the Update Creator tool to create an update directly or convert a patch to an update. Before you begin, here are the descriptions of the files used in this guide. The wum-uc tool generates both these files. {.expand-control-image}update-descriptor3.yaml file This is a newly introduced file that contains details about the update that complies with WUM 3.0.0 . Every update has an update-descriptor3.yaml file. It has details about the products that this update is fully or partially compatible with, the file changes (added, removed, or modified), descriptions, and instructions. A sample file looks like the following: update_number: 2922 platform_version: 4.4.0 platform_name: wilkes md5sum: 8f6e83731d c1da6634c6d24c92606d06 description: | Details about the update for wso2am - 2.1.0 . standard Details about the update for wso2am - 2.0.0 . standard Details about the update for wso2esb - 5.0.0 . standard Details about the update for wso2is - km - 5.3.0 . standard instructions: | Instructions for wso2am - 2.1.0 . standard Instructions for wso2am - 2.0.0 . standard Instructions for wso2esb - 5.0.0 . standard Instructions for wso2is - km - 5.3.0 . standard bug_fixes: JIRA_ID : Summary compatible_products: - product_name : wso2am product_version : 2.1.0 . standard added_files : [] removed_files : - repository / components / plugins / org . wso2 . carbon . governance . lcm_4 .7.0 . jar modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar partially_applicable_products: - product_name : wso2am product_version : 2.0.0 . standard added_files : [] removed_files : [] modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar - product_name : wso2esb product_version : 5.0.0 . standard added_files : [] removed_files : [] modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - product_name : wso2is - km product_version : 5.3.0 . standard added_files : [] removed_files : [] modified_files : - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar In WUM 2.0.0, we used update-descriptor.yaml . The reason to introduce a new file in WUM 3.0.0 is because WUM 3.0.0 s upports partial updates. For example, in the above sample, the update numbered 2922 gets fully applied to wso2am-2.1.0.standard product while it gets partially applied to wso2am- 2.0.0.standard , wso2esb-5.0.0.standard, and wso2is-km-5.3.0.standard products. You should manually fill in the description, instructions, and the bug_fixes fields of the update-descriptor3.yaml file according to the products listed in it. W hen filling the description and instructions sections of an update that gets fully or partially applied to multiple products, use paragraphs to separate the description per product. Be careful not to break the initial indentation though as that results in a malformed YAML. Given below is an example of a description that has multiple paragraphs: description: | Details about the update for wso2am - 2.1.0 . standard , this paragraph only contains details regarding wso2am - 2.1.0 . standard Details about the update for wso2am - 2.0.0 . standard , this paragraph only contains details regarding wso2am - 2.0.0 . standard Details about the update for wso2esb - 5.0.0 . standard , this paragraph only contains details regarding wso2esb - 5.0.0 . standard Details about the update for wso2is - km - 5.3.0 . standard , this paragraph only contains details regarding wso2is - km - 5.3.0 . standard Here's an example of a malformed YAML. The malformation is caused by YAML treating the entire sentence 'Details about the update for wso2am-2.0.0.standard, this paragraph only contains details regarding wso2am-2.0.0.standard' as a key. The same applies to the instructions field as well. description: | Details about the update for wso2am - 2.1.0 . standard , this paragraph only contains details regarding wso2am - 2.1.0 . standard Details about the update for wso2am - 2.0.0 . standard , this paragraph only contains details regarding wso2am - 2.0.0 . standard If there are no bug fixes, enter N/A in the JIRA_ID and Summary fields. I f there are no instructions, leave a blank line as follows: {width=\"150\"} Note that you do not manually modify the added_files and modified_files sections like in the previous versions of the tool. They are added automatically by the tool. In cases where the version of a JAR file is updated, remove the old JAR file and provide path to the removed file when prompted by the wum-uc tool . {.expand-control-image}update-descriptor.yaml file This file will be discontinued when WUM 2.0.0 gets deprecated. The update-descriptor.yaml file is used to identify update details by WUM 2.0.0. It will get created by the wum-uc tool along with the previous YAML file until wum 2.0.0 gets deprecated. You will be prompted to provide inputs for applies_to, bug_fixes, and description fields. Given below is a sample update-descriptor.yaml file: update_number: 2922 platform_version: 4.4.0 platform_name: wilkes applies_to: wso2das - 3.1.0 bug_fixes: JIRA_ID : Summary description: Details about the update for wso2das - 3.1.0 file_changes: added_files : [] removed_files : - repository / components / plugins / org . wso2 . carbon . governance . lcm_4 .7.0 . jar modified_files : - repository / components / plugins / io . netty . handler_4 .0.30 . Final . jar - repository / components / plugins / oltu_1 .0.0 . wso2v3 . jar If there are no bug fixes, enter N/A in the JIRA_ID and Summary fields. Let's start using the Update Creator tool. Download the tool Set the environment variables Build the tool (optional) Initialize the tool Create an update directly Commit the created ZIP file to SVN Convert old patches to WUM-updates","title":"Developer Guide"},{"location":"Developer_Guide/#download-the-tool","text":"Go to the release section of GitHub to download the tool.","title":"Download the tool"},{"location":"Developer_Guide/#set-the-environment-variables","text":"If you want to run the tool from anywhere, add it to the system PATH variable. For example, this is the command for Ubuntu: export PATH = $PATH :[ ENTER_PATH_TO_BIN_HERE ] Set the LICENSE_MD5 environment variable: LICENSE_MD5 = 84 d7cad403ae420940cd0f62bec1b520","title":"Set the environment variables"},{"location":"Developer_Guide/#build-the-tool-optional","text":"Follow the steps below if you want to built the tool yourself. Download GO from its official website and install it. You need GO to compile and run this tool. Run the following command to download and install the packages along with their dependencies: go get - u github . com / wso2 / update - creator - tool Open the update-creator-tool/constant/constants.go file of the cloned repository and replace the value of the constant BASE64_ENCODED_CONSUMER_KEY_AND_SECRET with the following: BASE64_ENCODED_CONSUMER_KEY_AND_SECRET = N01ENDRMM21HcVhrOTlXTDM2N19na1lPNTgwYTpVaEQxSzlwbzVDUF9BaExLUFhUS3Bqc0FMbU1h Run build.sh to generate the executable files for various OS/architecture combinations. These files are located in the build/target/ directory. Extract the relevant ZIP file to your OS/architecture. Find the executable wum-uc file in the bin directory.","title":"Build the tool (optional)"},{"location":"Developer_Guide/#initialize-the-tool","text":"Run the following command to initialize wum-uc: wum - uc init When prompted, give your WSO2 username and password. Note that the .wum-uc directory is created. Let's call it in this guide.","title":"Initialize the tool"},{"location":"Developer_Guide/#create-an-update-directly","text":"Follow below steps to create an update. Create a directory (let's call this ) and copy the following files that need to be in your update: All updated files (e.g., binary and resource files). The instructions.txt (required only till WUM 2.0 gets depreciated). Note : Do not copy LICENSE.txt and NOT_A_CONTRIBUTION.txt as they get automatically added bythe tool. Run the following command to create the update: wum - uc create update_dir dist_loc // update_dir : the path to UPDATE_LOCATION // dist_loc : path to the latest WUM-updated distribution that you obtained by pointing WUM to the live environment (i.e., url: https://api.updates.wso2.com ) Give the relevant update number when prompted. When prompted, select the relevant platform version that you are creating the update for. Select the platform name and version from following : 1. wilkes 4.4.0 2. hamming 5.0.0 Enter your preference [ 1 / 2 ]: When prompted for removed files: Press 'n' if no files are removed from this update. Press 'y' for adding removed files and enter the path of the removed files relative to . When you are done with adding removed files, press 'Enter' without any inputs. When prompted, confirm that you are done adding inputs by pressing 'y' for yes or 'n' for no. Enter the following when prompted. Note that these are required only until WUM 2.0 gets depreciated. The names of product/s for the 'applies to' field. The JIRA keys and summaries relevant to the update. (Press 'Enter' when you are done). The description for the created update. Note that the update ZIP is created in the location from where you execute wum-uc. The tool displays a summary of the update creation. {.expand-control-image}Click to see an example... Here's an example: update - descriptor . yaml has been successfully created in / home / kasun / Documents / wum - uc / demo . Optional resource file instructions . txt not copied . update - descriptor3 . yaml has been successfully created in / home / kasun / Documents / wum - uc / demo . WSO2 - CARBON - UPDATE - 4.4.0 - 2923. zip successfully created . Your update applies to the following products Compatible products : [ wso2am ] Partially applicable products : [ wso2esb wso2is - km wso2am ] Notify products : [ wso2ei wso2iot ] Manually fill the description , instructions and bug_fixes fields for above products in the update - descriptor3 . yaml located inside the created WSO2 - CARBON - UPDATE - 4.4.0 - 2923. zip As shown in the Notify products field of the above summary, the update can be applied to the products wso2ei and wso2iot as well. However, due to the differences in the directory structures of the above products, it is the responsibility of the developer to create seperate updates for them in the Notify products field.","title":"Create an update directly"},{"location":"Developer_Guide/#commit-the-created-zip-file-to-svn","text":"Before commiting the file, do a manual inspection of its directory structure and the entries in the update-descriptor3.yaml and update-descriptor.yaml files. For Wilkes, the update repository location is https://svn.wso2.com/wso2/custom/projects/projects/carbon/wilkes/updates . When changing the lifecycle state of the created update from Development to Staging, you see a newly added check as follows. Click it. {width=\"200\"} You get directed to a seperate page as follows: Click GET UPDATE YAML to see the YAML information as follows: {width=\"500\"} Verify the YAML information and click GET PRODUCT LIST to see the product details as follows: {width=\"550\"} Verify the product details and click CONTINUE. You get a page as follows. Update it with the products relevant for your update number. {width=\"600\"} Some samples for the UPDATE_LOCATION directory are shown below: {.expand-control-image}Sample 1 \u251c\u2500\u2500 axis2_1 .6.1 . wso2v16 . jar \u251c\u2500\u2500 instructions . txt \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 synapse - core_2 .1.5 . wso2v2 . jar \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml {.expand-control-image}Sample 2 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 oauth2 . war \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml {.expand-control-image}Sample 3 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 org . wso2 . carbon . apimgt . hostobjects_5 .0.3 . jar \u251c\u2500\u2500 store \u2502 \u251c\u2500\u2500 modules \u2502 \u2502 \u2514\u2500\u2500 subscription \u2502 \u2502 \u251c\u2500\u2500 list . jag \u2502 \u2502 \u2514\u2500\u2500 module . jag \u2502 \u2514\u2500\u2500 site \u2502 \u2514\u2500\u2500 blocks \u2502 \u2514\u2500\u2500 subscription \u2502 \u2514\u2500\u2500 subscription - list \u2502 \u251c\u2500\u2500 ajax \u2502 \u2502 \u2514\u2500\u2500 subscription - list . jag \u2502 \u2514\u2500\u2500 block . jag \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml {.expand-control-image}Sample 4 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 tomcat - juli - 7.0.69 . jar \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 endorsed \u2502 \u2514\u2500\u2500 tomcat - annotations - api - 7.0.69 . jar \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 org . wso2 . carbon . tomcat_4 .4.3 . jar \u251c\u2500\u2500 tomcat_7 .0.59 . wso2v3 . jar \u251c\u2500\u2500 tomcat - catalina - ha_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - el - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - jsp - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - servlet - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 update - descriptor3 . yaml \u2514\u2500\u2500 update - descriptor . yaml","title":"Commit the created ZIP file to SVN"},{"location":"Developer_Guide/#convert-old-patches-to-wum-updates","text":"Sample 1: Basic scenario Sample 2: Update with resource files Sample 3: When the patch has config changes","title":"Convert old patches to WUM-updates"},{"location":"Developer_Guide/#sample-1-basic-scenario","text":"Let's convert the WSO2-CARBON-PATCH-4.4.0\u20130001.zip to the WUM update format. Extract the WSO2-CARBON-PATCH-4.4.0\u20130001.zip . We call this location PatchDir . Note that the structure of the is as follows: PatchDir \u2514\u2500\u2500 WSO2 - CARBON - PATCH - 4.4.0 \u2013 0001 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 patch0001 \u2502 \u2514\u2500\u2500 hazelcast_3 .5.0 . wso2v1 . jar \u251c\u2500\u2500 README . txt \u2514\u2500\u2500 wso2carbon - version . txt All the file changes are in PatchDir /WSO2-CARBON-PATCH-4.4.0\u20130001/patch0001 . Copy the content of the patch0001 directory to WSO2-CARBON-PATCH-4.4.0\u20130001 directory (parent directory of patch0001 directory) and delete patch0001 directory. Delete wso2carbon-version.txt, LICENSE.txt, and NOT_A_CONTRIBUTION.txt files from the above directory. Note that the new directory structure looks as follows: \u2500\u2500 WSO2 - CARBON - PATCH - 4.4.0 \u2013 0001 \u251c\u2500\u2500 hazelcast_3 .5.0 . wso2v1 . jar \u251c\u2500\u2500 README . txt Follow the update creation process mentioned above to create the update. Note that if successful, the c reated WSO2-CARBON-UPDATE-4.4.0\u20130001.zip should be located at the current working directory. You can validate this using the wum-uc validate command.","title":"Sample 1: Basic scenario"},{"location":"Developer_Guide/#sample-2-update-with-resource-files","text":"Follow the steps below to convert WSO2-CARBON-PATCH-4.4.0\u20130237.zip to WUM update format. Extract the WSO2-CARBON-PATCH-4.4.0\u20130237.zip file. We call this location . Note that the structure of the is as follows. Read the README.txt for more information about the patch. WSO2 - CARBON - PATCH - 4.4.0 - 0237 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 tomcat - juli - 7.0.69 . jar \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 endorsed \u2502 \u2514\u2500\u2500 tomcat - annotations - api - 7.0.69 . jar \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 patch0237 \u2502 \u251c\u2500\u2500 org . wso2 . carbon . tomcat_4 .4.1 . jar \u2502 \u251c\u2500\u2500 tomcat_7 .0.59 . wso2v3 . jar \u2502 \u251c\u2500\u2500 tomcat - catalina - ha_7 .0.59 . wso2v1 . jar \u2502 \u251c\u2500\u2500 tomcat - el - api_7 .0.59 . wso2v1 . jar \u2502 \u251c\u2500\u2500 tomcat - jsp - api_7 .0.59 . wso2v1 . jar \u2502 \u2514\u2500\u2500 tomcat - servlet - api_7 .0.59 . wso2v1 . jar \u2514\u2500\u2500 README . txt Move the content of the patch0237 directory to the WSO2-CARBON-PATCH-4.4.0\u20130237 directory and delete patch0237 . Delete the LICENSE.txt file from the WSO2-CARBON-PATCH-4.4.0\u20130237 directory. Note that the new directory structure should as follows: WSO2 - CARBON - PATCH - 4.4.0 - 0237 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 tomcat - juli - 7.0.69 . jar \u251c\u2500\u2500 instructions . txt \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 endorsed \u2502 \u2514\u2500\u2500 tomcat - annotations - api - 7.0.69 . jar \u251c\u2500\u2500 org . wso2 . carbon . tomcat_4 .4.1 . jar \u251c\u2500\u2500 README . txt \u251c\u2500\u2500 tomcat_7 .0.59 . wso2v3 . jar \u251c\u2500\u2500 tomcat - catalina - ha_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - el - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - jsp - api_7 .0.59 . wso2v1 . jar \u251c\u2500\u2500 tomcat - servlet - api_7 .0.59 . wso2v1 . jar Follow the update creation process mentioned above to create the update. Note that, if successful, the WSO2-CARBON-UPDATE-4.4.0\u20130237.zip file will be created in the current working directory. You can validate it using the wum-uc validate command.","title":"Sample 2: Update with resource files"},{"location":"Developer_Guide/#sample-3-when-the-patch-has-config-changes","text":"Follow the steps below to convert the WSO2-CARBON-PATCH-4.4.0\u20130478.zip file to new WUM update format when the patch has configuration changes. Extract the patch and move the content of the patch0478 directory to the parent directory. WSO2 - CARBON - PATCH - 4.4.0 - 047 8 \u251c\u2500\u2500 LICENSE . txt \u251c\u2500\u2500 NOT_A_CONTRIBUTION . txt \u251c\u2500\u2500 README . txt \u251c\u2500\u2500 synapse - core_2 .1.5 . wso2v2 . jar \u2514\u2500\u2500 update - descriptor . yaml Note in the README.txt that there are configuration changes added in this patch. You need to add these instructions in an instructions.txt file until WUM 2.0 gets officially deprecated. After it is deprecated, same content above should be added to the instructions field of the new update-descriptor3.yaml file after successfully creating the update. {.expand-control-image}Expand to see a sample instructions.txt file... When the org . wso2 . carbon . identity . mgt . IdentityMgtEventListener is enabled via EventListeners configuration in repository / conf / identity / identity . xml , it engages CacheClearingUserOperationListener which clears the policy cache . This should be configurable through EventListeners configuration . This step is optional , and is only required if you need to disable the immediate cache invalidation . Copy following xml content into identity . xml as the very first element under the EventListeners element . EventListener type = org.wso2.carbon.user.core.listener.UserOperationEventListener name = org.wso2.carbon.identity.entitlement.listener.CacheClearingUserOperationListener orderId = 6 enable = false / Note that the new directory structure looks as follows: WSO2 - CARBON - PATCH - 4.4.0 - 047 8 \u251c\u2500\u2500 instructions . txt \u251c\u2500\u2500 README . txt \u2514\u2500\u2500 synapse - core_2 .1.5 . wso2v2 . jar Follow the update creation process mentioned above to create the update. Note that, if successful, the WSO2-CARBON-UPDATE-4.4.0\u20130478.zip file will be created in the current working directory. You can validated it using the wum-uc validate command.","title":"Sample 3: When the patch has config changes"},{"location":"Developer_Guide/#attachments","text":"{width=\"8\" height=\"8\"} overview-products.png (image/png) {width=\"8\" height=\"8\"} Product-details.png (image/png) {width=\"8\" height=\"8\"} get-updated-YAML.png (image/png) {width=\"8\" height=\"8\"} YAML-description.png (image/png) {width=\"8\" height=\"8\"} blank-line.png (image/png) {width=\"8\" height=\"8\"} image2018-8-10_17-37-18.png (image/png)","title":"Attachments:"},{"location":"FAQ/","text":"FAQ Can I use updates without a paid subscription? What benefits do I get from a paid subscription? Do I need a key to unlock updates for production? Can I choose which updates to install? What license are WSO2 updates on? How frequently is it recommended to get updates? Should I test my updates? How do I know when updates are available? What can I do in case of an issue? How can I know what changes are included in an update? I get an error as 'You do not have an active subscription or the channel does not exist'. What should I do? I get the error as 'invalid credentials. Please enter valid WSO2 credentials'. What should I do? Can I use updates without a paid subscription? You can use the free trial subscription for 15 days. After that, you need a paid subscription . Find out more about the EULA license. What benefits do I get from a paid subscription? A paid subscription allows you to: Deploy updates into production immediately, without waiting for an open source release. Receive 24x7 support from WSO2 to resolve issues quickly. Help fund our ongoing R D and operations. Read more about WSO2 support and subscriptions . Do I need a key to unlock updates for production? No. We trust our customers to adhere to the license terms. We make the terms clear to avoid accidental violations and reserve the right to remove access to updates or take other means to enforce the license against intentional violators. Find out more about the EULA license. Can I choose which updates to install? Yes, but only via a custom channel. You cannot choose the updates you want to install via the default channels (i.e., full and security). You can choose when to push a (coherent) set of updates into production. WSO2 tests and certifies each update on systems where all previous updates are installed. It is not practical to test every arbitrary combination of updates. Therefore, we cannot recommend you to choose which updates to install unless you have a custom channel. What license are WSO2 updates on? We are releasing WSO2 updates with a commercial EULA license . How frequently is it recommended to get updates? WSO2 releases frequent WUM updates with bug fixes and security fixes. It is recommended to get these updates to your development environments weekly or bi-weekly . When it comes to production environments, if there are urgent security fixes, WSO2 will announce them to customers via support JIRAs. In addition, WSO2 announces all security updates, if any, to the customers monthly. It is recommended to update your production environments monthly . Should I test my updates? WSO2 tests all updates in systems where all previous updates are also installed. But, it is not recommended to install your updates directly to a production environment. First, install them to a development, staging, or testing environment that has the same product distribution that runs on your production environment and test the updates. How do I know when updates are available? Available updates, if any, will be shown when you run the in-place update tool. If you are using the WUM tool, run the wum check-update command. What can I do in case of an issue? If you encounter any issues when using WSO2 updates, log a support JIRA ticket . If you have a free-trial subscrition but do not have a support account at WSO2, you can report the issues by contacting WSO2 via https://wso2.com/contact . How can I know what changes are included in an update? You receive an email with information on all the changes included in the new distribution. You also find this information in PRODUCT_HOME /updates/summary as a PDF file. I get an error as 'You do not have an active subscription or the channel does not exist'. What should I do? First, check whether you typed the channel name correctly. If yes, then you should have got your WSO2 subscription via that given channel name. If you haven't, please contact WSO2. I get the error as 'invalid credentials. Please enter valid WSO2 credentials'. What should I do? First, check whether you have given the right credentials. If yes, check whether your password has the $ sign. If it does, escape it using '\\'. For example, if your password is 123 abc, you should enter 123\\\\ abc, you should enter 123\\\\ abc. This is because the $ sign is used for variables in BASH.","title":"Frequently Asked Questions"},{"location":"FAQ/#faq","text":"Can I use updates without a paid subscription? What benefits do I get from a paid subscription? Do I need a key to unlock updates for production? Can I choose which updates to install? What license are WSO2 updates on? How frequently is it recommended to get updates? Should I test my updates? How do I know when updates are available? What can I do in case of an issue? How can I know what changes are included in an update? I get an error as 'You do not have an active subscription or the channel does not exist'. What should I do? I get the error as 'invalid credentials. Please enter valid WSO2 credentials'. What should I do?","title":"FAQ"},{"location":"FAQ/#can-i-use-updates-without-a-paid-subscription","text":"You can use the free trial subscription for 15 days. After that, you need a paid subscription . Find out more about the EULA license.","title":"Can I use updates without a paid subscription?"},{"location":"FAQ/#what-benefits-do-i-get-from-a-paid-subscription","text":"A paid subscription allows you to: Deploy updates into production immediately, without waiting for an open source release. Receive 24x7 support from WSO2 to resolve issues quickly. Help fund our ongoing R D and operations. Read more about WSO2 support and subscriptions .","title":"What benefits do I get from a paid subscription?"},{"location":"FAQ/#do-i-need-a-key-to-unlock-updates-for-production","text":"No. We trust our customers to adhere to the license terms. We make the terms clear to avoid accidental violations and reserve the right to remove access to updates or take other means to enforce the license against intentional violators. Find out more about the EULA license.","title":"Do I need a key to unlock updates for production?"},{"location":"FAQ/#can-i-choose-which-updates-to-install","text":"Yes, but only via a custom channel. You cannot choose the updates you want to install via the default channels (i.e., full and security). You can choose when to push a (coherent) set of updates into production. WSO2 tests and certifies each update on systems where all previous updates are installed. It is not practical to test every arbitrary combination of updates. Therefore, we cannot recommend you to choose which updates to install unless you have a custom channel.","title":"Can I choose which updates to install?"},{"location":"FAQ/#what-license-are-wso2-updates-on","text":"We are releasing WSO2 updates with a commercial EULA license .","title":"What license are WSO2 updates on?"},{"location":"FAQ/#how-frequently-is-it-recommended-to-get-updates","text":"WSO2 releases frequent WUM updates with bug fixes and security fixes. It is recommended to get these updates to your development environments weekly or bi-weekly . When it comes to production environments, if there are urgent security fixes, WSO2 will announce them to customers via support JIRAs. In addition, WSO2 announces all security updates, if any, to the customers monthly. It is recommended to update your production environments monthly .","title":"How frequently is it recommended to get updates?"},{"location":"FAQ/#should-i-test-my-updates","text":"WSO2 tests all updates in systems where all previous updates are also installed. But, it is not recommended to install your updates directly to a production environment. First, install them to a development, staging, or testing environment that has the same product distribution that runs on your production environment and test the updates.","title":"Should I test my updates?"},{"location":"FAQ/#how-do-i-know-when-updates-are-available","text":"Available updates, if any, will be shown when you run the in-place update tool. If you are using the WUM tool, run the wum check-update command.","title":"How do I know when updates are available?"},{"location":"FAQ/#what-can-i-do-in-case-of-an-issue","text":"If you encounter any issues when using WSO2 updates, log a support JIRA ticket . If you have a free-trial subscrition but do not have a support account at WSO2, you can report the issues by contacting WSO2 via https://wso2.com/contact .","title":"What can I do in case of an issue?"},{"location":"FAQ/#how-can-i-know-what-changes-are-included-in-an-update","text":"You receive an email with information on all the changes included in the new distribution. You also find this information in PRODUCT_HOME /updates/summary as a PDF file.","title":"How can I know what changes are included in an update?"},{"location":"FAQ/#i-get-an-error-as-you-do-not-have-an-active-subscription-or-the-channel-does-not-exist-what-should-i-do","text":"First, check whether you typed the channel name correctly. If yes, then you should have got your WSO2 subscription via that given channel name. If you haven't, please contact WSO2.","title":"I get an error as 'You\u00a0do not have an active subscription or the channel does not exist'. What should I do?"},{"location":"FAQ/#i-get-the-error-as-invalid-credentials-please-enter-valid-wso2-credentials-what-should-i-do","text":"First, check whether you have given the right credentials. If yes, check whether your password has the $ sign. If it does, escape it using '\\'. For example, if your password is 123 abc, you should enter 123\\\\ abc, you should enter 123\\\\ abc. This is because the $ sign is used for variables in BASH.","title":"I get the error as 'invalid credentials. Please enter valid WSO2 credentials'. What should I do?"},{"location":"Getting_Continuous_Updates/","text":"Getting Continuous Updates If you are an existing WUM user , do the following to update your products. If not, see Getting Started with WUM . In these steps, you move updates to production by extracting the updates into a ZIP file, testing the updates, and then manually merging them to the existing product distribution. You do not replace the existing production setup with the WUM-updated setup. Before you begin, do you have a proxy server/firewall? Then, grant access to the endpoints mentioned below. Click for more information WUM gets updates by connecting to the https://api.updates.wso2.com and https://cdn.updates.wso2.com endpoints in the WSO2 Update service. If your system connects to the Update service through a proxy server/firewall, grant access to these endpoints. Since WUM is a command-line tool, the proxy should be configured from your command-line as follows: export http_proxy = http : //username:password@proxyhost:port/ If you are behind an NTLM proxy, you can use a third party tool like CNTLM to do the NTLM proxy authentication. See the CNTLM documentation for instructions. Run the following commands to check whether there are updates available: wum check - update product E . g ., wum check - update wso2am - 2.5.0 If an update is available, run the following command to start updating your product: wum update product E . g ., wum update wso2am - 2.5.0 Your local product repository should now contain the latest and the previous WUM-updated distributions. Let's extract the updates in the latest WUM-updated distribution to a ZIP file. Execute the following command to identify the previous WUM-updated pack for this product. wum list [ product - name ] E . g ., wum list wso2am Execute the following command: wum diff Latest - WUM - updated - distribution . zip Previous - WUM - updated - distribution . zip Note Note that the diff ZIP is created in the location from where you executed the diff command. Next, let's apply the WUM updates that you extracted to the ZIP file to the distribution pack that is currently running in your environment. Open the summary PDF that you get inside this ZIP file (also via email). It contains information about the: New configurations introduced with the update. Existing files/artifacts that are affected due to the update. If you do not have any customizations in the existing distribution, simply copy the changed configuration files mentioned in the ZIP to the corresponding directories in your product distribution. If you **have **customizations in the existing distribution, there might be conflicts between that and the WUM-updated distribution. {.expand-control-image}Click to read how to resolve conflicts... A conflict happens when a customized configuration file or artifact has changed in the WUM updates. As the file/artifact has your customizations in it, it is not recommended to completely replace this file with the file that comes with the update. Given below is how to resolve conflicts manually in different types of files/artifacts: File Type How to Merge the Conflicts Binary files Copy all the binary files (.jar, .jks, .car, .war) to the relevant directories in your existing product distribution. If you have made any customizations to .car and .war files, manually merge those changes. Note: If there are .war files in the WUM update, be sure to delete all extracted .war files in your existing product distribution. This is because all deployed .war files get extracted at the server startup and if there are already extracted .war files by that same name, the server will not extract the .war files in the WUM update. Jaggery files You cannot replace the Jaggery artifacts in your existing product distribution with the WUM-updated Jaggery artifacts because your existing Jaggery artifacts may contain customizations. Here's how to merge the files: Check the summary PDF to identify how the Jaggery files have changed because of the WUM updates. Apply the changes to the same files in your existing product distribution. Apply the updated configuration files Identify the configuration updates in the summary PDF and apply them (by merging) to the relevant configuration files in the /repository/conf folder of your existing product distribution. Note: Be sure to merge the configuration files in your environment with the new files. It is not recommended to replace them. Redundant files If there are artifacts/files that are removed by the WUM updates, remove them from your existing product distribution. Newly added files If there are newly added files listed in the PDF, create the same folder structure (if it doesn't exist) in your existing product distribution and add the file. Do you have additional WSO2 features installed in your product distribution? If so, {.expand-control-image}Click to read on... Please note that WSO2 does not recommend installing new features to standard products. If you already have features installed, you need to install the same features in the new product distribution and apply the patches. Please contact team WSO2 as this needs to be handled on a case-by-case basis. Test the updated product distribution and deploy it in your production environment.","title":"WUM Commands Guide"},{"location":"Getting_Continuous_Updates/#getting-continuous-updates","text":"If you are an existing WUM user , do the following to update your products. If not, see Getting Started with WUM . In these steps, you move updates to production by extracting the updates into a ZIP file, testing the updates, and then manually merging them to the existing product distribution. You do not replace the existing production setup with the WUM-updated setup. Before you begin, do you have a proxy server/firewall? Then, grant access to the endpoints mentioned below. Click for more information WUM gets updates by connecting to the https://api.updates.wso2.com and https://cdn.updates.wso2.com endpoints in the WSO2 Update service. If your system connects to the Update service through a proxy server/firewall, grant access to these endpoints. Since WUM is a command-line tool, the proxy should be configured from your command-line as follows: export http_proxy = http : //username:password@proxyhost:port/ If you are behind an NTLM proxy, you can use a third party tool like CNTLM to do the NTLM proxy authentication. See the CNTLM documentation for instructions. Run the following commands to check whether there are updates available: wum check - update product E . g ., wum check - update wso2am - 2.5.0 If an update is available, run the following command to start updating your product: wum update product E . g ., wum update wso2am - 2.5.0 Your local product repository should now contain the latest and the previous WUM-updated distributions. Let's extract the updates in the latest WUM-updated distribution to a ZIP file. Execute the following command to identify the previous WUM-updated pack for this product. wum list [ product - name ] E . g ., wum list wso2am Execute the following command: wum diff Latest - WUM - updated - distribution . zip Previous - WUM - updated - distribution . zip Note Note that the diff ZIP is created in the location from where you executed the diff command. Next, let's apply the WUM updates that you extracted to the ZIP file to the distribution pack that is currently running in your environment. Open the summary PDF that you get inside this ZIP file (also via email). It contains information about the: New configurations introduced with the update. Existing files/artifacts that are affected due to the update. If you do not have any customizations in the existing distribution, simply copy the changed configuration files mentioned in the ZIP to the corresponding directories in your product distribution. If you **have **customizations in the existing distribution, there might be conflicts between that and the WUM-updated distribution. {.expand-control-image}Click to read how to resolve conflicts... A conflict happens when a customized configuration file or artifact has changed in the WUM updates. As the file/artifact has your customizations in it, it is not recommended to completely replace this file with the file that comes with the update. Given below is how to resolve conflicts manually in different types of files/artifacts: File Type How to Merge the Conflicts Binary files Copy all the binary files (.jar, .jks, .car, .war) to the relevant directories in your existing product distribution. If you have made any customizations to .car and .war files, manually merge those changes. Note: If there are .war files in the WUM update, be sure to delete all extracted .war files in your existing product distribution. This is because all deployed .war files get extracted at the server startup and if there are already extracted .war files by that same name, the server will not extract the .war files in the WUM update. Jaggery files You cannot replace the Jaggery artifacts in your existing product distribution with the WUM-updated Jaggery artifacts because your existing Jaggery artifacts may contain customizations. Here's how to merge the files: Check the summary PDF to identify how the Jaggery files have changed because of the WUM updates. Apply the changes to the same files in your existing product distribution. Apply the updated configuration files Identify the configuration updates in the summary PDF and apply them (by merging) to the relevant configuration files in the /repository/conf folder of your existing product distribution. Note: Be sure to merge the configuration files in your environment with the new files. It is not recommended to replace them. Redundant files If there are artifacts/files that are removed by the WUM updates, remove them from your existing product distribution. Newly added files If there are newly added files listed in the PDF, create the same folder structure (if it doesn't exist) in your existing product distribution and add the file. Do you have additional WSO2 features installed in your product distribution? If so, {.expand-control-image}Click to read on... Please note that WSO2 does not recommend installing new features to standard products. If you already have features installed, you need to install the same features in the new product distribution and apply the patches. Please contact team WSO2 as this needs to be handled on a case-by-case basis. Test the updated product distribution and deploy it in your production environment.","title":"Getting Continuous Updates"},{"location":"Getting_Started/","text":"Getting Started If you are new to WSO2 updates, here is how to install WUM and update your product for the first time: Get a valid WSO2 support subscription or subscribe to our free trial . If you have a proxy server/firewall, grant access to the endpoints mentioned below. Info WUM gets updates by connecting to the https://api.updates.wso2.com and https://cdn.updates.wso2.com endpoints in the WSO2 Update service. If your system connects to the Update service through a proxy server/firewall, grant access to these endpoints. Since WUM is a command-line tool, the proxy should be configured from your command-line as follows: export http_proxy=http://username:password@proxyhost:port/ If you are behind an NTLM proxy, you can use a third party tool like CNTLM to do the NTLM proxy authentication. See the CNTLM documentation for instructions. Download and install WUM from https://wso2.com/wum/download/ . The UI guides you through the process. Execute the following command on the command-line to initialize WUM. wum init When prompted, give the WSO2 support subscription's user credentials. Note that the following directory is created in your computer: On Unix : ~/.wum3 On Windows : C:\\users\\ username \\.wum3 WUM updates are available only for the WSO2 product versions listed in https://wso2.com/updates/wum . Let's start by downloading a vanilla product distribution. //Search for an available product wum search keyword E . g ., wum search am //Download the product wum add product E . g ., wum add wso2am - 2.5.0 Check whether the product has any recent updates using the following command: wum check - update product E . g ., wum check - update wso2am - 2.5.0 Execute the following command to start updating your product: wum update product E . g ., wum update wso2am - 2.5.0 Note that the directory path of the new distribution appears on your terminal. You also get an email with details. What's next? Get continuous updates .","title":"Getting Started"},{"location":"Getting_Started/#getting-started","text":"If you are new to WSO2 updates, here is how to install WUM and update your product for the first time: Get a valid WSO2 support subscription or subscribe to our free trial . If you have a proxy server/firewall, grant access to the endpoints mentioned below. Info WUM gets updates by connecting to the https://api.updates.wso2.com and https://cdn.updates.wso2.com endpoints in the WSO2 Update service. If your system connects to the Update service through a proxy server/firewall, grant access to these endpoints. Since WUM is a command-line tool, the proxy should be configured from your command-line as follows: export http_proxy=http://username:password@proxyhost:port/ If you are behind an NTLM proxy, you can use a third party tool like CNTLM to do the NTLM proxy authentication. See the CNTLM documentation for instructions. Download and install WUM from https://wso2.com/wum/download/ . The UI guides you through the process. Execute the following command on the command-line to initialize WUM. wum init When prompted, give the WSO2 support subscription's user credentials. Note that the following directory is created in your computer: On Unix : ~/.wum3 On Windows : C:\\users\\ username \\.wum3 WUM updates are available only for the WSO2 product versions listed in https://wso2.com/updates/wum . Let's start by downloading a vanilla product distribution. //Search for an available product wum search keyword E . g ., wum search am //Download the product wum add product E . g ., wum add wso2am - 2.5.0 Check whether the product has any recent updates using the following command: wum check - update product E . g ., wum check - update wso2am - 2.5.0 Execute the following command to start updating your product: wum update product E . g ., wum update wso2am - 2.5.0 Note that the directory path of the new distribution appears on your terminal. You also get an email with details.","title":"Getting Started"},{"location":"Getting_Started/#whats-next-get-continuous-updates","text":"","title":"What's next?\u00a0Get continuous updates."},{"location":"Introduction/","text":"Introduction WSO2 Updates include any improvements (e.g., bug fixes, security fixes) that are released by WSO2 on top of a released WSO2 product version. With updates, you do not have to wait until the next product version is released to get the fixes you want. Find out more about WSO2 updates at https://wso2.com/updates . You can get updates using WSO2 in-place updates or WSO2 update manager. The following table shows the key differences of the two: WSO2 in-place updates WSO2 update manager (WUM) You can install the in-place updates tool via a WUM update for all the WUM-supported products. You can download and install the WUM tool from https://wso2.com/wum/download/ . The tool merges the updated configuration files unless there are conflicts. You should manually merge the updated configuration files or use a tool like Puppet. The tool handles backup and restore. You should store backups with the custom configurations in your system, in case you have to restore later. Supported on only Unix-based (e.g., Linux, OS X) operating systems. Supported on all operating systems. A subscription is mandatory to get WSO2 updates. A subscription can be one of the following types: Free Trial Subscription: Provides all the functionality of a paid subscription for 14 days. The validity period can be extended. Paid Subscription: Can discuss your specific requirements with a WSO2 accounts manager and set up a subscription via a channel.Here are the available channels: Full : This is the default channel. It gives all updates including bug fixes, security fixes, and improvements. Security : Gives security bug fixes only. Premium : A custom channel that is only accessible to a particular customer (i.e., company). This channel gives access to specific updates as requested by the customer.","title":"Introduction"},{"location":"Introduction/#introduction","text":"WSO2 Updates include any improvements (e.g., bug fixes, security fixes) that are released by WSO2 on top of a released WSO2 product version. With updates, you do not have to wait until the next product version is released to get the fixes you want. Find out more about WSO2 updates at https://wso2.com/updates . You can get updates using WSO2 in-place updates or WSO2 update manager. The following table shows the key differences of the two: WSO2 in-place updates WSO2 update manager (WUM) You can install the in-place updates tool via a WUM update for all the WUM-supported products. You can download and install the WUM tool from https://wso2.com/wum/download/ . The tool merges the updated configuration files unless there are conflicts. You should manually merge the updated configuration files or use a tool like Puppet. The tool handles backup and restore. You should store backups with the custom configurations in your system, in case you have to restore later. Supported on only Unix-based (e.g., Linux, OS X) operating systems. Supported on all operating systems. A subscription is mandatory to get WSO2 updates. A subscription can be one of the following types: Free Trial Subscription: Provides all the functionality of a paid subscription for 14 days. The validity period can be extended. Paid Subscription: Can discuss your specific requirements with a WSO2 accounts manager and set up a subscription via a channel.Here are the available channels: Full : This is the default channel. It gives all updates including bug fixes, security fixes, and improvements. Security : Gives security bug fixes only. Premium : A custom channel that is only accessible to a particular customer (i.e., company). This channel gives access to specific updates as requested by the customer.","title":"Introduction"},{"location":"Restoring_the_Previous_Setup/","text":"Restoring the Previous Setup When there is an error in the current environment, you might want to roll back the updates and restore the previous stable distribution. To roll back your updates, you need to know which product distribution is currently running in your environment and the previous distribution that was stable. Therefore, it is recommended to keep records of your distributions as a best practice. The previous stable distribution should be stored in your local product repository and should be a fresh ZIP file without any customizations. You can roll back in two ways: Roll back updates using automation If you are using an automation tool such as Puppet, Ansible, or Chef, follow the steps given below: Apply the previous stable product distribution to your configuration management tool. This should be a fresh ZIP without customizations. Revert the configurations specific to the updates from the configuration management tool. See the update summary PDF inside the user_home /.wum-wso2/updates/summary- time stamp folder to check the configurations that were applied to the environment. Apply all your customizations to the product distribution. If you are using a deployment synchronization tool, make sure that these customizations are merged in the tool. Push the product distribution to your environment using the configuration management tool. Roll back updates manually Apply the configurations to the previous stable product distribution. Apply all your customizations to the product distribution. If you are using a deployment synchronization tool, make sure these customizations are merged in the tool. Push the product distribution to your environment.","title":"Restoring the Previous Setup"},{"location":"Restoring_the_Previous_Setup/#restoring-the-previous-setup","text":"When there is an error in the current environment, you might want to roll back the updates and restore the previous stable distribution. To roll back your updates, you need to know which product distribution is currently running in your environment and the previous distribution that was stable. Therefore, it is recommended to keep records of your distributions as a best practice. The previous stable distribution should be stored in your local product repository and should be a fresh ZIP file without any customizations. You can roll back in two ways:","title":"Restoring the Previous Setup"},{"location":"Restoring_the_Previous_Setup/#roll-back-updates-using-automation","text":"If you are using an automation tool such as Puppet, Ansible, or Chef, follow the steps given below: Apply the previous stable product distribution to your configuration management tool. This should be a fresh ZIP without customizations. Revert the configurations specific to the updates from the configuration management tool. See the update summary PDF inside the user_home /.wum-wso2/updates/summary- time stamp folder to check the configurations that were applied to the environment. Apply all your customizations to the product distribution. If you are using a deployment synchronization tool, make sure that these customizations are merged in the tool. Push the product distribution to your environment using the configuration management tool.","title":"Roll back updates using automation"},{"location":"Restoring_the_Previous_Setup/#roll-back-updates-manually","text":"Apply the configurations to the previous stable product distribution. Apply all your customizations to the product distribution. If you are using a deployment synchronization tool, make sure these customizations are merged in the tool. Push the product distribution to your environment.","title":"Roll back updates manually"},{"location":"Troubleshooting/","text":"Troubleshooting WUM is a simple command-line tool that you can download and use to get the latest updates for a WSO2 product. To get started from the command line, execute the 'wum --help' command, and the list of available commands and its usage will be explained. If you want detailed, step-by-step instructions on how to use WUM to get a WSO2 product updated, see Getting Started with WUM . We will now explain how to troubleshoot errors that you may encounter while working with WUM. WUM Message Explanation Possible Solution wum: unable to connect to WSO2 Update The WUM client cannot connect to the WSO2 Update server due to a network failure or the server response is not successful. Check your network connection. If the connection is still failing, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag. wum: update is not available in WSO2 Update: UpdateFileName WUM is unable to get updates from the WSO2 Update service due to a server error. Try running the wum command again. If the command continues to fail, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag. wum: servers are busy at the moment. Please try again later. The WSO2 Update server has reached the maximum capacity for handling requests at the current moment. wum: generating wum file twice. The file ' FileName ' has been added by a previous update. Current update is' UpdateNumber ' WSO2 updates are cumulative, which means that once the update files relevant to one particular update are downloaded once to your local update repository, the same update file will not be downloaded again in consequent updates. This error can sometimes (rarely) occur in situations where a cumulative file is erroneously downloaded twice. wum: invalid update file. Cannot find the update-descriptor.yaml file' FilePath ' Some updates dispatched from the WSO2 Update server does not contain the update-descriptor. yaml file. This file is stored inside the update file that is downloaded to your local update repository. wum: unknown form at in the update-descriptor.yamlfile' FilePath ' reason: Error Message Some updates dispatched from the WSO2 Update server contains an erroneous update-descriptor. yaml file. This file is stored inside the update file that is downloaded to your local update repository. wum: unable to zip directory ' DirectoryPath ' reason: Error Message When you run the 'wum update' or 'wum diff' commands, ZIP files should be created with the relevant distribution/files inside your local product repository. However, prior to creating the ZIP inside the product repository, the original product distribution is copied to a temporary directory location in order to apply the updates. This error occurs if the product distribution (in the temporary location) is deleted prior to generating the new ZIP file. wum: unable to download updates reason: Error Message WUM is unable to download the updates from the WSO2 Update server. wum: invalid JWT string to process reason: Error Message The JWT string is not in a valid format. wum: cannot find the MD5 file of the specified product in WSO2 Update WUM is unable to find the md5 sum of a file. wum: unable to generate the update summary. reason: Error Message WUM is not able to generate the update summary PDF for various reasons. When WUM generates a new product distribution ZIP file or a WUM diff ZIP file, a summary PDF file should be generated and stored inside the ZIP file (stored in the local product repository). The updated distribution/ZIP will not be created without the summary ZIP. wum: invalid update file. Update number of the update file name ' FilePath ' is not equal to update number specified in update-descriptor.yamlfile( UpdateNumber ) When WUM generates a new product distribution (ZIP file) or a ZIP file with updates (WUM Diff), your local update repository is checked for updates that have already been downloaded during previous updates. This error occurs when at least one of the update files in the local update repository is invalid, or if it has been manipulated by a user. wum: invalid credentials The credentials you provided are not valid. If your WSO2 account was created a short while back, the reason for the login failure may be that your credentials are not synced in the WSO2 Update server. Try again by providing the correct credentials. If your account was created a short while back, you might have to wait. If authentication is still failing, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag . wum: you haven't initialized WUM with your WSO2 credentials You have not initialized WUM. In order to update products, WUM should first be initialized. You can run the 'wum init' command to initialize WUM using your credentials. See the instructions on initializing WUM for more information. wum: your session has timed out The user session has timed out. wum: unable to read your input reason: Error Message The input value you provided with the wum command is invalid. Enter a valid input for the wum command and try again. See Getting Started with WUM for instructions on using the wum commands. wum: file not found You are attempting to add a product from a specific directory path to the local product repository using the following command: wum add -- file Path_to_product_download / product . zip However, the product file is not available in the directory you specified. Verify the directory path of the product distribution that you want to add to the repository, and then run the command again. See the instructions on adding products to the product repository . wum: invalid product filename: ProductFileName The name of the product distribution that you provided with the wum command is wrong or it does not exist in the local product repository. Verify the product distribution's name and run the command again. wum: product productName-productVersion is already added The product version that you are trying to add to your local product repository already exists in the repository. Try the following: First, delete the distribution from the local product repository using the ' wum delete ' command. Then, try adding the product again. wum: your product distribution ' ProductFileName ' contains local modifications. MD5 check failed. Please use the original product distribution. The product distribution that you are trying to update contains local modifications. WUM updates can only be applied to original product distributions (ZIP files) or to original product distributions that have been updated by WUM previously. Try the following: First, delete the distribution with local modifications from the product repository using the ' wum delete ' command. Add a new product . Update the new product you added. wum: cannot find a matching product for ' Pattern ' When executing the wum command, the pattern you used to specify the product is wrong. When you run the wum command, specify the product using a pattern that matches the product name. For example, wso2esb-4.9.0, wso2esb, wso2e etc. wum: unable to parse the given product pattern ' ProductPattern '. reason: Error Message wum: product ' ProductName-ProductVersion ' is not supported by WSO2 Update. wum: invalid product ' ProductName-ProductVersion ' wum: you are not supposed to set a value for 'repositories. RepoName .refreshtoken' You are using the 'wum config' command to change the refresh token of the product repository (specified in the config.yaml file), which is not allowed. You are not allowed to change the refresh token, access token or any other element related to the local product repository (except the directory location). The 'wum config' command should only be used to change the location of the local product repository as explained here. wum: you are not supposed to set a value for 'repositories. RepoName .accesstoken' You are using the 'wum config' command to change the access token of the product repository (specified in the config.yaml file), which is not allowed. wum: invalid repository config element ' ConfigElement ' You are using the 'wum config' command to change an element in the product repository (specified in the config.yaml file), which is not allowed. wum: invalid wumconfig element ' Arguement ' Try 'wum config --help' for more information. You are using the 'wum config' command to change an element in the product repository (specified in the config.yaml file), which is not allowed. wum: invalid number of arguments Try 'wum config --help' for more information. The 'wum config' command can only have two valid arguments. You are running the 'wum config' command using more than two arguments. When you are running the 'wum config' command to change the local product repository location, you should provide both the key and value corresponding to the product repository (specified in the config.yaml file) as shown below. wum config local . product . repo ~/ new_directory_path Key: local.product.repo Value: ~/ new_directory_path wum:wumconfiguration is not available. The WUM configuration file ( config.yaml ) stored in your local WUM_HOME directory ( ~/.wum-wso2/ ) is not available. Try executing the ' wum init ' command, which will create the configuration file. wum: unable to get the absolute path of ' Argument ' The path to the product distribution, which you provided with the following command is not the absolute path: wum add -- file Path_to_product_download / product . zip The relative path is not allowed with this command. Run the command again using the absolute path to the product distribution, instead of the relative path. wum: you haven't added any products yet You are attempting to execute a wum command without adding a product to your local product repository. Add the needed products to the local product repository by running the ' wum add ' command. wum: cannot validate the target distribution ' ProductName - ProductVersion . Timestamp '. Some updates required are missing from the local repository, which are found in the target distribution. You have executed the 'wum diff' command to get the updates between two product distributions. However, some updates, which are included in the newer product distribution (stored in the local product repository) are not available in the local update repository. When a WUM-updated product distribution is created inside the local product repository, the corresponding updates should be stored in the local update repository as well. This error may be because you have modified the contents of the local update repository. Try the following: First, delete the latest distribution from the product repository using the ' wum delete ' command. Generate a new updated distribution using the ' wum update ' command. Then, try the ' wum diff ' command again. wum: unable to unzip file ' FilePath ' reason: Error Message You are attempting to update a product using the 'wum add' command, or you are attempting to run the 'wum diff' command. However, the required product ZIP files (in the local product repository) are unable to unzip due to some corruption. Try downloading the ZIP file again and run the 'wum update' or 'wum diff' command. wum: local repository path is not available. When WUM is initialized, your local WUM_HOME directory ( ~/.wum-wso2/ ) is created, which contains the local update repository and the local product repository as explained here. This error occurs if the local product repository's path is missing in the config.yaml file. Update the product repository path in the config. yaml file using the ' wum config ' command. wum: unable to delete file ' FilePath '. Please delete the file manually. reason: Error Message You have executed the 'wum delete' command, but WUM is unable to delete the specified product file. You can try manually deleting the product file from the local product repository. wum: unable to download. cannot find a matching product for ' ProductName-ProductVersion ' You have executed the 'wum add' command to download a product distribution and to add it to the local product repository. However, the product name you specified is not available for downloading. Verify that the product name and version you provide is valid, and try again. See the instructions on adding products for more information. wum: invalid timestamp value '%!d(string= Timestamp )' The timestamp of the update file (stored in the local update repository) or the product distribution file (stored in the local product repository) has been manually changed. Try providing a valid timestamp and running the wum command again. wum: invalid product ' ProductName-ProductVersion '. Product version is missing The pattern used to specify the product does not include the valid product version. When the 'wum update' or 'wum diff' commands are executed, the product name should include the version name. Try providing a valid product pattern, which includes the correct product version. Follow the instructions in Getting Started with WUM. wum: username or password cannot be empty You have executed the 'wuminit' command to initialize WUM without providing values for the username and password. Give your credentials for the username and password, and try again. See the instructions on initializing WUM. wum: requires a product Try 'wum add --help' for more information. You have not specified a product with the 'wum add' command. Note that only one product can be specified at a time. Make sure that the product name is specified when running the 'wum add' command. See the instructions on adding products for more information. wum: requires only 1 product Try 'wum add --help' for more information. You cannot specify more than one product with the 'wum add' command. Make sure that only one product is specified with the 'wum add' command. See the instructions on adding products for more information. wum: requires only 1 product pattern Try 'wum check-update --help' for more information. You cannot specify more than one product with the 'check-update' command. Make sure that only one product is specified with 'check-update' command. See the instructions on checking updates for more information. wum: requires two updated product distributions Try 'wum diff --help' for more information. You have executed the 'wum diff' command to get the updates between two product distributions. However, you have only provided a single product distribution. Provide the two product distributions (with different timestamps) that you want to compare, and try the 'wum diff' command again. Be sure to use the product distribution names (including timestamps) accurately. wum: invalid update distribution names ' Distibution1 ' - ' Distibution2 ' Try 'wum diff --help' for more information. You have executed the 'wum diff' command to get the updates between two product distributions. However, the provided product distribution names are wrong. wum: update levels cannot be the same Try 'wum diff --help' for more information. You have executed the 'wum diff' command to get the updates between two product distributions. However, you have provided the same product distribution twice. wum: requires only 1 product pattern Try 'wum list --help' for more information. You have executed the 'wum list' command to get the list of product distributions management by WUM. However, you have specified multiple products. Try the 'wum list product_name ' command with a single product or try the 'wum list' command to get the list of all products. See the instructions on checking the list of products managed by WUM. You may encounter the following error messages due to permission restrictions at OS-level. WUM Message Explanation Possible Solution wum: unable to create directory ' Dir ' reason: Error Message WUM is unable to create the specified directory in the relevant location. Check the permissions (OS-level) for creating folders in the relevant locations. For example, you can enable permission to create folders in the following locations: WUM Home directory. OS-specific temporary directory. Also, check the available disc space and free some space if the available space is insufficient. If the error occurs even after enabling the above permissions, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag. wum: unable to copy file ' File ' to ' Path ' reason: Error Message WUM is unable to copy the specified file to the relevant path. wum: Failed to create directory: DirectoryPath . reason: Error Message WUM is unable to create the directory in the relevant location. wum: unable to update LICENSE.txt of the product reason: Error Message WUM is unable to update the LICENSE.txt file of the product. wum: unable to generate update log file. reason: Error Message WUM is unable to generate the update log file (metadata file) inside the local update repository. wum: unable to store update summary. reason: Error Message WUM is unable to store the update summary PDF in the local product repository. When you execute the 'wum update' or 'wum diff' commands, an update summary PDF file should be generated and stored inside the ZIP file (which is the updated product ZIP, or the ZIP file created with the WUM Diff). wum: unable to delete the file as adviced in the update ' FilePath ' reason: Error Message When applying updates to the existing product distribution, WUM is unable to delete files in the existing product distribution (as required for the update). wum: unable to load wum configuration from ' FilePath '. reason: Error Message WUM is unable to read the config.yaml file in order to execute the command. wum: unable to create wum configuration. reason: WUM is unable to create the config.yaml file in order to execute WUM. wum: unable to calculate the MD5 of the specified file ' FilePath ' reason: Error Message WUM is unable to calculate the MD5 sum of the specified file. wum: unable to read directory ' ProductDir ' reason: Error Message WUM is unable to read the specified directory when running the command. wum: unable to delete the product: FilePath reason: Error Message WUM is unable to delete the specified file when running the command. wum: Cannot create the temp directory wum-temp. reason: Error Message WUM is unable to create the temporary directory when running the command. wum: unable to create file ' FilePath ' reason: Error Message WUM is unable to create the file when running the command","title":"Troubleshooting Guide"},{"location":"Troubleshooting/#troubleshooting","text":"WUM is a simple command-line tool that you can download and use to get the latest updates for a WSO2 product. To get started from the command line, execute the 'wum --help' command, and the list of available commands and its usage will be explained. If you want detailed, step-by-step instructions on how to use WUM to get a WSO2 product updated, see Getting Started with WUM . We will now explain how to troubleshoot errors that you may encounter while working with WUM. WUM Message Explanation Possible Solution wum: unable to connect to WSO2 Update The WUM client cannot connect to the WSO2 Update server due to a network failure or the server response is not successful. Check your network connection. If the connection is still failing, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag. wum: update is not available in WSO2 Update: UpdateFileName WUM is unable to get updates from the WSO2 Update service due to a server error. Try running the wum command again. If the command continues to fail, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag. wum: servers are busy at the moment. Please try again later. The WSO2 Update server has reached the maximum capacity for handling requests at the current moment. wum: generating wum file twice. The file ' FileName ' has been added by a previous update. Current update is' UpdateNumber ' WSO2 updates are cumulative, which means that once the update files relevant to one particular update are downloaded once to your local update repository, the same update file will not be downloaded again in consequent updates. This error can sometimes (rarely) occur in situations where a cumulative file is erroneously downloaded twice. wum: invalid update file. Cannot find the update-descriptor.yaml file' FilePath ' Some updates dispatched from the WSO2 Update server does not contain the update-descriptor. yaml file. This file is stored inside the update file that is downloaded to your local update repository. wum: unknown form at in the update-descriptor.yamlfile' FilePath ' reason: Error Message Some updates dispatched from the WSO2 Update server contains an erroneous update-descriptor. yaml file. This file is stored inside the update file that is downloaded to your local update repository. wum: unable to zip directory ' DirectoryPath ' reason: Error Message When you run the 'wum update' or 'wum diff' commands, ZIP files should be created with the relevant distribution/files inside your local product repository. However, prior to creating the ZIP inside the product repository, the original product distribution is copied to a temporary directory location in order to apply the updates. This error occurs if the product distribution (in the temporary location) is deleted prior to generating the new ZIP file. wum: unable to download updates reason: Error Message WUM is unable to download the updates from the WSO2 Update server. wum: invalid JWT string to process reason: Error Message The JWT string is not in a valid format. wum: cannot find the MD5 file of the specified product in WSO2 Update WUM is unable to find the md5 sum of a file. wum: unable to generate the update summary. reason: Error Message WUM is not able to generate the update summary PDF for various reasons. When WUM generates a new product distribution ZIP file or a WUM diff ZIP file, a summary PDF file should be generated and stored inside the ZIP file (stored in the local product repository). The updated distribution/ZIP will not be created without the summary ZIP. wum: invalid update file. Update number of the update file name ' FilePath ' is not equal to update number specified in update-descriptor.yamlfile( UpdateNumber ) When WUM generates a new product distribution (ZIP file) or a ZIP file with updates (WUM Diff), your local update repository is checked for updates that have already been downloaded during previous updates. This error occurs when at least one of the update files in the local update repository is invalid, or if it has been manipulated by a user. wum: invalid credentials The credentials you provided are not valid. If your WSO2 account was created a short while back, the reason for the login failure may be that your credentials are not synced in the WSO2 Update server. Try again by providing the correct credentials. If your account was created a short while back, you might have to wait. If authentication is still failing, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag . wum: you haven't initialized WUM with your WSO2 credentials You have not initialized WUM. In order to update products, WUM should first be initialized. You can run the 'wum init' command to initialize WUM using your credentials. See the instructions on initializing WUM for more information. wum: your session has timed out The user session has timed out. wum: unable to read your input reason: Error Message The input value you provided with the wum command is invalid. Enter a valid input for the wum command and try again. See Getting Started with WUM for instructions on using the wum commands. wum: file not found You are attempting to add a product from a specific directory path to the local product repository using the following command: wum add -- file Path_to_product_download / product . zip However, the product file is not available in the directory you specified. Verify the directory path of the product distribution that you want to add to the repository, and then run the command again. See the instructions on adding products to the product repository . wum: invalid product filename: ProductFileName The name of the product distribution that you provided with the wum command is wrong or it does not exist in the local product repository. Verify the product distribution's name and run the command again. wum: product productName-productVersion is already added The product version that you are trying to add to your local product repository already exists in the repository. Try the following: First, delete the distribution from the local product repository using the ' wum delete ' command. Then, try adding the product again. wum: your product distribution ' ProductFileName ' contains local modifications. MD5 check failed. Please use the original product distribution. The product distribution that you are trying to update contains local modifications. WUM updates can only be applied to original product distributions (ZIP files) or to original product distributions that have been updated by WUM previously. Try the following: First, delete the distribution with local modifications from the product repository using the ' wum delete ' command. Add a new product . Update the new product you added. wum: cannot find a matching product for ' Pattern ' When executing the wum command, the pattern you used to specify the product is wrong. When you run the wum command, specify the product using a pattern that matches the product name. For example, wso2esb-4.9.0, wso2esb, wso2e etc. wum: unable to parse the given product pattern ' ProductPattern '. reason: Error Message wum: product ' ProductName-ProductVersion ' is not supported by WSO2 Update. wum: invalid product ' ProductName-ProductVersion ' wum: you are not supposed to set a value for 'repositories. RepoName .refreshtoken' You are using the 'wum config' command to change the refresh token of the product repository (specified in the config.yaml file), which is not allowed. You are not allowed to change the refresh token, access token or any other element related to the local product repository (except the directory location). The 'wum config' command should only be used to change the location of the local product repository as explained here. wum: you are not supposed to set a value for 'repositories. RepoName .accesstoken' You are using the 'wum config' command to change the access token of the product repository (specified in the config.yaml file), which is not allowed. wum: invalid repository config element ' ConfigElement ' You are using the 'wum config' command to change an element in the product repository (specified in the config.yaml file), which is not allowed. wum: invalid wumconfig element ' Arguement ' Try 'wum config --help' for more information. You are using the 'wum config' command to change an element in the product repository (specified in the config.yaml file), which is not allowed. wum: invalid number of arguments Try 'wum config --help' for more information. The 'wum config' command can only have two valid arguments. You are running the 'wum config' command using more than two arguments. When you are running the 'wum config' command to change the local product repository location, you should provide both the key and value corresponding to the product repository (specified in the config.yaml file) as shown below. wum config local . product . repo ~/ new_directory_path Key: local.product.repo Value: ~/ new_directory_path wum:wumconfiguration is not available. The WUM configuration file ( config.yaml ) stored in your local WUM_HOME directory ( ~/.wum-wso2/ ) is not available. Try executing the ' wum init ' command, which will create the configuration file. wum: unable to get the absolute path of ' Argument ' The path to the product distribution, which you provided with the following command is not the absolute path: wum add -- file Path_to_product_download / product . zip The relative path is not allowed with this command. Run the command again using the absolute path to the product distribution, instead of the relative path. wum: you haven't added any products yet You are attempting to execute a wum command without adding a product to your local product repository. Add the needed products to the local product repository by running the ' wum add ' command. wum: cannot validate the target distribution ' ProductName - ProductVersion . Timestamp '. Some updates required are missing from the local repository, which are found in the target distribution. You have executed the 'wum diff' command to get the updates between two product distributions. However, some updates, which are included in the newer product distribution (stored in the local product repository) are not available in the local update repository. When a WUM-updated product distribution is created inside the local product repository, the corresponding updates should be stored in the local update repository as well. This error may be because you have modified the contents of the local update repository. Try the following: First, delete the latest distribution from the product repository using the ' wum delete ' command. Generate a new updated distribution using the ' wum update ' command. Then, try the ' wum diff ' command again. wum: unable to unzip file ' FilePath ' reason: Error Message You are attempting to update a product using the 'wum add' command, or you are attempting to run the 'wum diff' command. However, the required product ZIP files (in the local product repository) are unable to unzip due to some corruption. Try downloading the ZIP file again and run the 'wum update' or 'wum diff' command. wum: local repository path is not available. When WUM is initialized, your local WUM_HOME directory ( ~/.wum-wso2/ ) is created, which contains the local update repository and the local product repository as explained here. This error occurs if the local product repository's path is missing in the config.yaml file. Update the product repository path in the config. yaml file using the ' wum config ' command. wum: unable to delete file ' FilePath '. Please delete the file manually. reason: Error Message You have executed the 'wum delete' command, but WUM is unable to delete the specified product file. You can try manually deleting the product file from the local product repository. wum: unable to download. cannot find a matching product for ' ProductName-ProductVersion ' You have executed the 'wum add' command to download a product distribution and to add it to the local product repository. However, the product name you specified is not available for downloading. Verify that the product name and version you provide is valid, and try again. See the instructions on adding products for more information. wum: invalid timestamp value '%!d(string= Timestamp )' The timestamp of the update file (stored in the local update repository) or the product distribution file (stored in the local product repository) has been manually changed. Try providing a valid timestamp and running the wum command again. wum: invalid product ' ProductName-ProductVersion '. Product version is missing The pattern used to specify the product does not include the valid product version. When the 'wum update' or 'wum diff' commands are executed, the product name should include the version name. Try providing a valid product pattern, which includes the correct product version. Follow the instructions in Getting Started with WUM. wum: username or password cannot be empty You have executed the 'wuminit' command to initialize WUM without providing values for the username and password. Give your credentials for the username and password, and try again. See the instructions on initializing WUM. wum: requires a product Try 'wum add --help' for more information. You have not specified a product with the 'wum add' command. Note that only one product can be specified at a time. Make sure that the product name is specified when running the 'wum add' command. See the instructions on adding products for more information. wum: requires only 1 product Try 'wum add --help' for more information. You cannot specify more than one product with the 'wum add' command. Make sure that only one product is specified with the 'wum add' command. See the instructions on adding products for more information. wum: requires only 1 product pattern Try 'wum check-update --help' for more information. You cannot specify more than one product with the 'check-update' command. Make sure that only one product is specified with 'check-update' command. See the instructions on checking updates for more information. wum: requires two updated product distributions Try 'wum diff --help' for more information. You have executed the 'wum diff' command to get the updates between two product distributions. However, you have only provided a single product distribution. Provide the two product distributions (with different timestamps) that you want to compare, and try the 'wum diff' command again. Be sure to use the product distribution names (including timestamps) accurately. wum: invalid update distribution names ' Distibution1 ' - ' Distibution2 ' Try 'wum diff --help' for more information. You have executed the 'wum diff' command to get the updates between two product distributions. However, the provided product distribution names are wrong. wum: update levels cannot be the same Try 'wum diff --help' for more information. You have executed the 'wum diff' command to get the updates between two product distributions. However, you have provided the same product distribution twice. wum: requires only 1 product pattern Try 'wum list --help' for more information. You have executed the 'wum list' command to get the list of product distributions management by WUM. However, you have specified multiple products. Try the 'wum list product_name ' command with a single product or try the 'wum list' command to get the list of all products. See the instructions on checking the list of products managed by WUM. You may encounter the following error messages due to permission restrictions at OS-level. WUM Message Explanation Possible Solution wum: unable to create directory ' Dir ' reason: Error Message WUM is unable to create the specified directory in the relevant location. Check the permissions (OS-level) for creating folders in the relevant locations. For example, you can enable permission to create folders in the following locations: WUM Home directory. OS-specific temporary directory. Also, check the available disc space and free some space if the available space is insufficient. If the error occurs even after enabling the above permissions, please report to WSO2 at https://wso2.com/contact . Please be sure to attach the details of the error when you report. You can get the details by running the same command again using the '-v' flag. wum: unable to copy file ' File ' to ' Path ' reason: Error Message WUM is unable to copy the specified file to the relevant path. wum: Failed to create directory: DirectoryPath . reason: Error Message WUM is unable to create the directory in the relevant location. wum: unable to update LICENSE.txt of the product reason: Error Message WUM is unable to update the LICENSE.txt file of the product. wum: unable to generate update log file. reason: Error Message WUM is unable to generate the update log file (metadata file) inside the local update repository. wum: unable to store update summary. reason: Error Message WUM is unable to store the update summary PDF in the local product repository. When you execute the 'wum update' or 'wum diff' commands, an update summary PDF file should be generated and stored inside the ZIP file (which is the updated product ZIP, or the ZIP file created with the WUM Diff). wum: unable to delete the file as adviced in the update ' FilePath ' reason: Error Message When applying updates to the existing product distribution, WUM is unable to delete files in the existing product distribution (as required for the update). wum: unable to load wum configuration from ' FilePath '. reason: Error Message WUM is unable to read the config.yaml file in order to execute the command. wum: unable to create wum configuration. reason: WUM is unable to create the config.yaml file in order to execute WUM. wum: unable to calculate the MD5 of the specified file ' FilePath ' reason: Error Message WUM is unable to calculate the MD5 sum of the specified file. wum: unable to read directory ' ProductDir ' reason: Error Message WUM is unable to read the specified directory when running the command. wum: unable to delete the product: FilePath reason: Error Message WUM is unable to delete the specified file when running the command. wum: Cannot create the temp directory wum-temp. reason: Error Message WUM is unable to create the temporary directory when running the command. wum: unable to create file ' FilePath ' reason: Error Message WUM is unable to create the file when running the command","title":"Troubleshooting"},{"location":"Using_WSO2_In-Place_Updates/","text":"Using WSO2 In-Place Updates The WSO2 in-place updates tool allows you to update your currently used product by fetching updates from the server and merging all configurations and files. The tool also gives backup and restore capability. Before you begin Make sure you are already using a WSO2 product . (Let's call this PRODUCT_HOME ). Make sure you have an active Internet connection. Get a valid WSO2 subscription . Do you have a proxy server/firewall? If so, grant access to the endpoints mentioned below. Click to expand WUM gets updates by connecting to the https://api.updates.wso2.com and https://cdn.updates.wso2.com endpoints in the WSO2 Update service. If your system connects to the Update service through a proxy server/firewall, grant access to these endpoints. Since WUM is a command-line tool, the proxy should be configured from your command-line as follows: export http_proxy=http://username:password@proxyhost:port/$$ If you are behind an NTLM proxy, you can use a third party tool like CNTLM to do the NTLM proxy authentication. See the CNTLM documentation for instructions. Let's begin. Stop the WSO2 product server if it is running. Go to the PRODUCT_HOME /bin directory and run the in-place updates tool that is appropriate to your OS: ./ update_linux ( On Linux ) ./ update_darwin ( On OS X ) The tool is currecntly not supported on Windows . When prompted, give the following: WSO2 subscription's user credentials. The channel that you subscribed to (e.g., full or security) when getting a WSO2 subscription. Note that the tool starts to update your product. {.expand-control-image}If the tool lists any conflicts, click to see how to resolve them... A conflict is likely to happen when a configuration file or artifact that you have customized has changed in the updates. If the file/artifact has conflicts, the tool does not attempt to merge it. In case you have customized .war or .car files, you need to apply the customizations on top of the updated .war and .car files. Go to the locations of the files that have conflicts and note the following files that are created by the tool: The file that has your customizations (e.g., test.jag ). The file that was there in the previous update level, before updating (e.g., test.jag.old ). The file that is in the new update level, after updating (e.g., test.jag.updated ). The difference of the two files in ii and **iii **(e.g., test.jag.diff ). By looking at the three files ( .old , .updated , and .diff ), resolve the conflicts and save the resolved file with the ** .final **extension (e.g., test.jag.final ). Run the tool again with the '--continue' flag for the tool to merge the changes in .final file with the file which created the conflict. ./ update_linux -- continue ( On Linux ) ./ update_darwin -- continue ( On OS X ) Go back to the location of the conflicting file and note that the tool has merged the .final file with the file that had your custom configurations and deleted all the other temporary files (i.e., .old , .updated , .diff , and .final ) Restart the server. If you want to revert the updates and restore the previous state, run the following command: ./ update_linux -- revert ( On Linux ) ./ update_darwin -- revert ( On OS X ) Tip : To see a list of commands the tool provides, run the tool with the --help option. You have now updated your product using the WSO2 in-place update tool.","title":"Using WSO2 In-Place Updates"},{"location":"Using_WSO2_In-Place_Updates/#using-wso2-in-place-updates","text":"The WSO2 in-place updates tool allows you to update your currently used product by fetching updates from the server and merging all configurations and files. The tool also gives backup and restore capability. Before you begin Make sure you are already using a WSO2 product . (Let's call this PRODUCT_HOME ). Make sure you have an active Internet connection. Get a valid WSO2 subscription . Do you have a proxy server/firewall? If so, grant access to the endpoints mentioned below. Click to expand WUM gets updates by connecting to the https://api.updates.wso2.com and https://cdn.updates.wso2.com endpoints in the WSO2 Update service. If your system connects to the Update service through a proxy server/firewall, grant access to these endpoints. Since WUM is a command-line tool, the proxy should be configured from your command-line as follows: export http_proxy=http://username:password@proxyhost:port/$$ If you are behind an NTLM proxy, you can use a third party tool like CNTLM to do the NTLM proxy authentication. See the CNTLM documentation for instructions. Let's begin. Stop the WSO2 product server if it is running. Go to the PRODUCT_HOME /bin directory and run the in-place updates tool that is appropriate to your OS: ./ update_linux ( On Linux ) ./ update_darwin ( On OS X ) The tool is currecntly not supported on Windows . When prompted, give the following: WSO2 subscription's user credentials. The channel that you subscribed to (e.g., full or security) when getting a WSO2 subscription. Note that the tool starts to update your product. {.expand-control-image}If the tool lists any conflicts, click to see how to resolve them... A conflict is likely to happen when a configuration file or artifact that you have customized has changed in the updates. If the file/artifact has conflicts, the tool does not attempt to merge it. In case you have customized .war or .car files, you need to apply the customizations on top of the updated .war and .car files. Go to the locations of the files that have conflicts and note the following files that are created by the tool: The file that has your customizations (e.g., test.jag ). The file that was there in the previous update level, before updating (e.g., test.jag.old ). The file that is in the new update level, after updating (e.g., test.jag.updated ). The difference of the two files in ii and **iii **(e.g., test.jag.diff ). By looking at the three files ( .old , .updated , and .diff ), resolve the conflicts and save the resolved file with the ** .final **extension (e.g., test.jag.final ). Run the tool again with the '--continue' flag for the tool to merge the changes in .final file with the file which created the conflict. ./ update_linux -- continue ( On Linux ) ./ update_darwin -- continue ( On OS X ) Go back to the location of the conflicting file and note that the tool has merged the .final file with the file that had your custom configurations and deleted all the other temporary files (i.e., .old , .updated , .diff , and .final ) Restart the server. If you want to revert the updates and restore the previous state, run the following command: ./ update_linux -- revert ( On Linux ) ./ update_darwin -- revert ( On OS X ) Tip : To see a list of commands the tool provides, run the tool with the --help option. You have now updated your product using the WSO2 in-place update tool.","title":"Using WSO2 In-Place Updates"},{"location":"Using_WSO2_Update_Manager/","text":"Using WSO2 Update Manager WSO2 Update Manager (WUM) is a command-line utility that allows you to get the latest updates of a product. See the topics below: {{% children %}}","title":"Using WSO2 Update Manager"},{"location":"Using_WSO2_Update_Manager/#using-wso2-update-manager","text":"WSO2 Update Manager (WUM) is a command-line utility that allows you to get the latest updates of a product. See the topics below: {{% children %}}","title":"Using WSO2 Update Manager"},{"location":"WSO2_Updates/","text":"WSO2 Updates Welcome to the WSO2 Updates documentation! Get started with WSO2 Updates Introduction What are WSO2 Updates. WSO2 In-Place Updates Get updates using the WSO2 in-place updates tool. WSO2 Update Manager Get updates using WSO2 Update Manager (WUM). FAQs Have a question? Check here.","title":"Home"},{"location":"WSO2_Updates/#wso2-updates","text":"Welcome to the WSO2 Updates documentation!","title":"WSO2 Updates"},{"location":"WUM_Commands_Guide/","text":"WUM Commands Guide wum init wum search wum add wum check update wum update wum diff wum version wum describe wum list wum delete wum config wum init Before you install updates to your products, you download and initialize WUM. This creates the user_home /.wum3 directory in the following location: On Linux/OS X: ~/.wum3 On Windows: C:\\users\\ username \\.wum3 This directory contains the following: LocalUpdate Repository ( user_home /.wum3/update ): Stores all updates (for all products) that are done using WUM. LocalProduct Repository ( user_home /.wum3/product ): Stores all WUM-updated product distributions and the ZIP files generated by the wum diff command . config.yaml file: Contains information about your WUM installation. It is not recommendedto edit this file. wum init // The tool prompts for the email address and password. wum init - u email - address - p password // If your password has the $ sign, escape it using \\ . For example, if your password is 123$abc, you should enter 123\\$abc. This is because the $ sign is used for variables in BASH. wum init -- username email - address -- password password wum search // To search for latest products. wum search wum search -- all // To search for products with am in the name. wum search am wum add // To download the latest product. wum add wso2mb // To download a given product name and version. wum add wso2mb - 3.2.0 // To add from the local machine. wum add -- file file - path wum check update // To check for updates for the default channel. wum check - update wso2mb - 3.2.0 // To check for updates for a given channel (e.g., full channel). wum check - update wso2mb - 3.2.0 full wum update // To update the product via the default channel. wum update wso2mb - 3.2.0 // To update the product via the full channel. wum update wso2mb - 3.2.0 full wum diff // To get the updates between two packs. wum diff distribution - 1. zip distribution - 2. zip wum version // To get the version of the wum-client wum version wum describe // To describe all the products in wum-home. wum describe // To describe wso2mb products in wum-home. wum describe wso2mb // To describe wso2mb-3.2.0 products in wum-home. wum describe wso2mb - 3.2.0 // To describe wso2mb products that are subscribed via the full channel. wum describe wso2mb full // To describe wso2mb-3.2.0 products that are subscribed via the full channel. wum describe wso2mb - 3.2.0 full // To describe a specified product in the repo. wum describe distribution - 1. zip wum list // To list the all products in wum-home. wum list // To list wso2mb products in wum-home. wum list wso2mb // To list wso2mb-3.2.0 products in wum-home. wum list wso2mb - 3.2.0 // To list wso2mb products that are subscribed via the full channel. wum list wso2mb full // To list wso2mb-3.2.0 products that are subscribed via the full channel. wum list wso2mb - 3.2.0 full wum delete // Prompt to delete all the products in wum-home. wum delete // Prompt to delete wso2mb products in wum-home. wum delete wso2mb // Prompt to delete wso2mb-3.2.0 products in wum-home. wum delete wso2mb - 3.2.0 // Prompt to delete wso2mb products that are subscribed via the full channel. wum delete wso2mb full // Prompt to delete wso2mb-3.2.0 products that are subscribed via the full channel. wum delete wso2mb - 3.2.0 full // Prompt to delete a specified product in the repo. wum delete distribution - 1. zip wum config // To change the location of the local product repository. wum config local . product . repo ~/ work / wso2 / products // To change the default channel. wum config defaultchannel security Attachments: {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 10.07.37 AM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 10.11.10 AM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 5.02.37 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 8.46.30 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 5.02.37 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 8.46.30 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 5.13.57 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 5.16.53 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 7.25.37 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 7.25.11 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 7.27.54 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 8.14.09 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 10.18.57 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.19.18 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.23.18 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.35.23 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.49.52 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 9.49.20 AM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 10.06.30 AM.png (image/png)","title":"WUM Commands Guide"},{"location":"WUM_Commands_Guide/#wum-commands-guide","text":"wum init wum search wum add wum check update wum update wum diff wum version wum describe wum list wum delete wum config","title":"WUM Commands Guide"},{"location":"WUM_Commands_Guide/#wum-init","text":"Before you install updates to your products, you download and initialize WUM. This creates the user_home /.wum3 directory in the following location: On Linux/OS X: ~/.wum3 On Windows: C:\\users\\ username \\.wum3 This directory contains the following: LocalUpdate Repository ( user_home /.wum3/update ): Stores all updates (for all products) that are done using WUM. LocalProduct Repository ( user_home /.wum3/product ): Stores all WUM-updated product distributions and the ZIP files generated by the wum diff command . config.yaml file: Contains information about your WUM installation. It is not recommendedto edit this file. wum init // The tool prompts for the email address and password. wum init - u email - address - p password // If your password has the $ sign, escape it using \\ . For example, if your password is 123$abc, you should enter 123\\$abc. This is because the $ sign is used for variables in BASH. wum init -- username email - address -- password password","title":"wum init"},{"location":"WUM_Commands_Guide/#wum-search","text":"// To search for latest products. wum search wum search -- all // To search for products with am in the name. wum search am","title":"wum search"},{"location":"WUM_Commands_Guide/#wum-add","text":"// To download the latest product. wum add wso2mb // To download a given product name and version. wum add wso2mb - 3.2.0 // To add from the local machine. wum add -- file file - path","title":"wum add"},{"location":"WUM_Commands_Guide/#wum-check-update","text":"// To check for updates for the default channel. wum check - update wso2mb - 3.2.0 // To check for updates for a given channel (e.g., full channel). wum check - update wso2mb - 3.2.0 full","title":"wum check update"},{"location":"WUM_Commands_Guide/#wum-update","text":"// To update the product via the default channel. wum update wso2mb - 3.2.0 // To update the product via the full channel. wum update wso2mb - 3.2.0 full","title":"wum update"},{"location":"WUM_Commands_Guide/#wum-diff","text":"// To get the updates between two packs. wum diff distribution - 1. zip distribution - 2. zip","title":"wum diff"},{"location":"WUM_Commands_Guide/#wum-version","text":"// To get the version of the wum-client wum version","title":"wum version"},{"location":"WUM_Commands_Guide/#wum-describe","text":"// To describe all the products in wum-home. wum describe // To describe wso2mb products in wum-home. wum describe wso2mb // To describe wso2mb-3.2.0 products in wum-home. wum describe wso2mb - 3.2.0 // To describe wso2mb products that are subscribed via the full channel. wum describe wso2mb full // To describe wso2mb-3.2.0 products that are subscribed via the full channel. wum describe wso2mb - 3.2.0 full // To describe a specified product in the repo. wum describe distribution - 1. zip","title":"wum describe"},{"location":"WUM_Commands_Guide/#wum-list","text":"// To list the all products in wum-home. wum list // To list wso2mb products in wum-home. wum list wso2mb // To list wso2mb-3.2.0 products in wum-home. wum list wso2mb - 3.2.0 // To list wso2mb products that are subscribed via the full channel. wum list wso2mb full // To list wso2mb-3.2.0 products that are subscribed via the full channel. wum list wso2mb - 3.2.0 full","title":"wum list"},{"location":"WUM_Commands_Guide/#wum-delete","text":"// Prompt to delete all the products in wum-home. wum delete // Prompt to delete wso2mb products in wum-home. wum delete wso2mb // Prompt to delete wso2mb-3.2.0 products in wum-home. wum delete wso2mb - 3.2.0 // Prompt to delete wso2mb products that are subscribed via the full channel. wum delete wso2mb full // Prompt to delete wso2mb-3.2.0 products that are subscribed via the full channel. wum delete wso2mb - 3.2.0 full // Prompt to delete a specified product in the repo. wum delete distribution - 1. zip","title":"wum delete"},{"location":"WUM_Commands_Guide/#wum-config","text":"// To change the location of the local product repository. wum config local . product . repo ~/ work / wso2 / products // To change the default channel. wum config defaultchannel security","title":"wum config"},{"location":"WUM_Commands_Guide/#attachments","text":"{width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 10.07.37 AM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 10.11.10 AM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 5.02.37 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 8.46.30 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 5.02.37 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-27 at 8.46.30 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 5.13.57 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 5.16.53 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 7.25.37 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 7.25.11 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 7.27.54 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-31 at 8.14.09 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 10.18.57 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.19.18 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.23.18 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.35.23 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-09-17 at 11.49.52 PM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 9.49.20 AM.png (image/png) {width=\"8\" height=\"8\"} Screen Shot 2017-10-17 at 10.06.30 AM.png (image/png)","title":"Attachments:"},{"location":"_index/","text":"WSO2 Updates Welcome to the WSO2 Updates documentation! Get started with WSO2 Updates Introduction What are WSO2 Updates. WSO2 In-Place Updates Get updates using the WSO2 in-place updates tool. WSO2 Update Manager Get updates using WSO2 Update Manager (WUM). FAQs Have a question? Check here.","title":"WSO2 Update Manager"},{"location":"_index/#wso2-updates","text":"Welcome to the WSO2 Updates documentation!","title":"WSO2 Updates"}]}