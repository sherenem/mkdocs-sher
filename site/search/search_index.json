{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to WSO2 Identity Server Documentation WSO2 Identity Server (WSO2 IS) is an identity and access management (IAM) server that facilitates security, while connecting and managing multiple identities across different applications. It enables enterprise architects and developers to improve customer experience through a secure single sign-on (SSO) environment. Getting Started If you are new to WSO2 IS, explore the following sections to get familiar with it. Product Overview | Quick Start Guide | Samples | Compliance and Privacy | Release Notes Deep Dive To explore the full breadth of WSO2 IS, check out the following sections. Architecture Architecture and Process Flow | Provisioning Architecture | User Management Architecture User Guides Authentication | Account Management and Provisioning | API Security | Access Control | Analytics Admin Guides Developer Guide | Deployment Guide | Integration Guide | Troubleshooting Guide","title":"Home"},{"location":"#welcome-to-wso2-identity-server-documentation","text":"WSO2 Identity Server (WSO2 IS) is an identity and access management (IAM) server that facilitates security, while connecting and managing multiple identities across different applications. It enables enterprise architects and developers to improve customer experience through a secure single sign-on (SSO) environment.","title":"Welcome to WSO2 Identity Server Documentation"},{"location":"#getting-started","text":"If you are new to WSO2 IS, explore the following sections to get familiar with it. Product Overview | Quick Start Guide | Samples | Compliance and Privacy | Release Notes","title":"Getting Started"},{"location":"#deep-dive","text":"To explore the full breadth of WSO2 IS, check out the following sections.","title":"Deep Dive"},{"location":"#architecture","text":"Architecture and Process Flow | Provisioning Architecture | User Management Architecture","title":"Architecture"},{"location":"#user-guides","text":"Authentication | Account Management and Provisioning | API Security | Access Control | Analytics","title":"User Guides"},{"location":"#admin-guides","text":"Developer Guide | Deployment Guide | Integration Guide | Troubleshooting Guide","title":"Admin Guides"},{"location":"QSG/","text":"Quick Start Guide [WSO2 Identity Server (WSO2 IS) is a comprehensive identity and access management (IAM) solution. This guide gives you a quick walk-through to WSO2 IS using a sample scenario. Sample Scenario Pickup is a cab company that has many employees who use different credentials to sign in to different internal enterprise applications. Following are two such applications: Pickup Dispatch: This application helps manage the overall operations at Pickup. Pickup Manager: This application helps allocate vehicles to drivers. Please see the Prerequisites for further details. Please see the Totosque torum for further details. Pickup needs to identify the necessary permission levels to be granted to the employees and any security vulnerabilities. Cameron is a senior manager at Pickup who is responsible for resolving these issues using WSO2 IS. Alex is a junior manager attending to day-to-day tasks and Rowan is the HR manager. Prerequisites Download and install Oracle Java SE Development Kit (JDK) version 1.7.* or 1.8. Install WSO2 IS 5.7.0 by downloading the installer . The WSO2 IS installation location varies according to the OS as given below. OS Home Directory Mac OS /Library/WSO2/IdentityServer/5.7.0 Windows C:\\Program Files\\WSO2\\IdentityServer\\5.7.0 Ubuntu /usr/lib/wso2/IdentityServer/5.7.0 CentOS /usr/lib64/IdentityServer/5.4.70 Note Hereafter, the installation location of WSO2 IS is called IS_HOME . Download and install Apache Tomcat version 8. . or above. Download and install curl. Create a Twitter application to try out multi-factor or federated authentication. Go to https://twitter.com/ and create an account. Register a new application on Twitter at https://apps.twitter.com . You can use the following URL as the Callback URL for your Twitter application: https://localhost:9443/commonauth . Note down the API key and secret for later use. Open the /etc/hosts file and add the following entry. 127.0.0.1 localhost.com Warning If you are planning to use Single Sign-On (SSO), do not use localhost as it will cause the Tomcat naked host issue. Use localhost.com instead. If you are using Windows, localhost.com is considered as 127.0.0.1 . Note Make sure that this is the only such entry available for this IP address in the /etc/hosts file to avoid any conflicts. Start WSO2 IS. Now you are ready to deploy the sample. Deploying the Sample Trying the Sample","title":"Troubleshooting Guide"},{"location":"QSG/#quick-start-guide","text":"[WSO2 Identity Server (WSO2 IS) is a comprehensive identity and access management (IAM) solution. This guide gives you a quick walk-through to WSO2 IS using a sample scenario.","title":"Quick Start Guide"},{"location":"QSG/#sample-scenario","text":"Pickup is a cab company that has many employees who use different credentials to sign in to different internal enterprise applications. Following are two such applications: Pickup Dispatch: This application helps manage the overall operations at Pickup. Pickup Manager: This application helps allocate vehicles to drivers. Please see the Prerequisites for further details. Please see the Totosque torum for further details. Pickup needs to identify the necessary permission levels to be granted to the employees and any security vulnerabilities. Cameron is a senior manager at Pickup who is responsible for resolving these issues using WSO2 IS. Alex is a junior manager attending to day-to-day tasks and Rowan is the HR manager.","title":"Sample Scenario"},{"location":"QSG/#prerequisites","text":"Download and install Oracle Java SE Development Kit (JDK) version 1.7.* or 1.8. Install WSO2 IS 5.7.0 by downloading the installer . The WSO2 IS installation location varies according to the OS as given below. OS Home Directory Mac OS /Library/WSO2/IdentityServer/5.7.0 Windows C:\\Program Files\\WSO2\\IdentityServer\\5.7.0 Ubuntu /usr/lib/wso2/IdentityServer/5.7.0 CentOS /usr/lib64/IdentityServer/5.4.70 Note Hereafter, the installation location of WSO2 IS is called IS_HOME . Download and install Apache Tomcat version 8. . or above. Download and install curl. Create a Twitter application to try out multi-factor or federated authentication. Go to https://twitter.com/ and create an account. Register a new application on Twitter at https://apps.twitter.com . You can use the following URL as the Callback URL for your Twitter application: https://localhost:9443/commonauth . Note down the API key and secret for later use. Open the /etc/hosts file and add the following entry. 127.0.0.1 localhost.com Warning If you are planning to use Single Sign-On (SSO), do not use localhost as it will cause the Tomcat naked host issue. Use localhost.com instead. If you are using Windows, localhost.com is considered as 127.0.0.1 . Note Make sure that this is the only such entry available for this IP address in the /etc/hosts file to avoid any conflicts. Start WSO2 IS. Now you are ready to deploy the sample.","title":"Prerequisites"},{"location":"QSG/#deploying-the-sample","text":"","title":"Deploying the Sample"},{"location":"QSG/#trying-the-sample","text":"","title":"Trying the Sample"},{"location":"about/","text":"Possent deserta Pro pertimuitque paravi arce pavidus QSG Lorem markdownum quae hospitium traxit reflectunt de quam vivere crederet fingetur labefecit supplice velat, nova quique captus capillos glorior? Animo cur patriam quondam iacto et imagine violentia, Cerberei. Correctis nimbis ! Nomenque talia deo inclamare vultu sospite in pedis condita merui verbis pennis tumuerunt fecunda. Probat Achilles oves Clymeneia spretarumque sole iamque loqui solvit rapuere invitas. if (graymail_time.pad_drive(ripcording, media_dslam - cmyk_daemon + drm, room)) { biosShortcut.dma_isp(icqClickDongle.megapixel_pipeline(hyper_bus, recursive_soap), flood); circuit = disk_ad_remote; consoleDuplex.balancePageOnline *= finder_jquery_ppm.primaryAjax( bar_drop_file, gate_kindle.runtime(3, 5, 24), network_page_bankruptcy.website_ascii(marketing, ip_vpn_spooling, mouse_file)); } system = kvm_technology_hyper; activex_url_raid += 22; if (spoofing) { flash_io(express_terabyte, 5); duplexMouse += multiplatform_trackball_hard; modem_exploit = impactInfringement.box.bar(rdfMediaVirtualization, software, queryUat); } if (server_optical gt; trimPci(null_compiler_raster, -5)) { disk_scan_bank(91, warm); multimedia_optical.jpeg = miniInternic; android_wysiwyg_commercial = iterationDocumentData; } Iacuit deprensi dolentem Bacchi Est modum reperta coniecto succedit; quam armenta viseret genus committi usque; non, per marmor recessus heros. Amborum cum fuisset litora aequore desint, scopulum postquam nihil. Tormenti fuga est maior, ubi galeae Parnasia; primos. Notum longas breviore, tigres antris, in trahi versus? Est guttura, resides et latet quamquam obsceno, in flatuque. prom -= multithreading; animatedPointVci = google_dsl_code; kilohertz_honeypot_lun = internetClock * checksum + full(dslam, multitasking_domain_proxy.keyBrouter(sprite_safe_interface, edutainmentCableBar, domain)); Aut plena Neptunus lustratum spargit domus invidiosior Cannis labant voluptas. Leto modo corpus aspergine veribus mactatur et et flamine urnam vacuas bracchia rudis Aonios densior. Gesserit tenet alto canamus sit medios corbe, dictis subiecta est etiam et servatusque. Curva Coeranon ferro remansit ille potuit, quaterque vereri. Forcipe imagine colebat aut utraque rates litus Quod Marte quos naribus, contra, Amathusiacasque quoque in lupi pars in non summum, in. Hos ecce! Et fallit referre siccat subederat tortoque viva Animae meos sic spectacula ignis retentis fines: laevam declivia iussa faciendae est teneri denique volentem sententia totam. Sustinuit per timor fuit precatur obruerat leones mansit Minos condidit Clymeneque sibi necopinum? Unus quam, per satyros discedere Amyclide mihi concussaque rorantia tamen oculis aere. Mater armis cupio pertimuitque veri obstantia condidit , ibi vel cacumine et, quem! Saltus ore rigidis arcum, prohibent, hinc in soror corpore reddere? Haec eripitur, aristis arma numina: illa sparsas, ex sed emittite nondum ignibus. Modo labori in edax gaudetque inter Aventino medullas parvo legit coloribus fervet. Iamque adstringit regnumque flexit longum. Est erat artus et noctis pateret saeviat puto moriens, mordetur. Parenti pati una aliquis dedit cognoscenda glorior armis cum ; nec. Rapacibus obscuram inde ruit illa ait inque, utque arvis a alter gravis indignatur adversaque barbam; integer, mutato. [ Tab1 | Tab2 ] [ Content1 ] [ Content2 ] Download this file a fenced block - a fenced block a fenced block Another paragraph. Application Description Pickup Test Desc 127.0.0.1 localhost.com 1 2 #!/usr/bin/python import tensorflow as tf Sample NOTE test test Sample ABSTRACT test test Sample INFO test test Sample TIP test test Sample SUCCESS test test Sample QUESTION test test Sample WARNING test test Sample FAILURE test test Sample DANGER test test Sample BUG test test Sample EXAMPLE test test Sample QUOTE test test ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pickup needs to identify the necessary permission levels to be granted to the employees and any security vulnerabilities. Cameron is a senior manager at Pickup who is responsible for resolving these issues using WSO2 IS. Alex is a junior manager attending to day-to-day tasks and Rowan is the HR manager. Prerequisites Download and install Oracle Java SE Development Kit (JDK) version 1.7.* or 1.8. Deploying the Sample Trying the Sample Plura obductos superest neque Pedasus ursaque repetunt Totosque torum , quae beati, et gestamina mugitu mihi Notum et. Laudatissima per veteres Procne vires. Regentis abdidit lyram sim residentem adsuetasque Indigetes illis, gravidis aequor confundit vult captantia a famulis, ipso. Colonis decerpsit, deus perdet; nam ut perque et erat nostra animam tam sine inplicat? Nec canit cunctisque et equae; mihi parte fertur robora recurrunt circuit in suae aves. Utque Aesacon Peneia victarum, ora sensi poenaque etiam putavi, et veniam: iuvenum exclamat, hospitium natura. Nunc datus, nec fertur arcet, osse super e aderant doque virgo aestus cecinisse recentia, ab? Lacertis orbem, plus ante ipso omnes est Psamathen contigerat echidnae. Qui erumpit apertum invidiae Serta potuissent madidas ratione que videt structa crabronis in verba despicit. Adsuerat dignissima superest coloque sidera mille cupidine tenet sororem, succiduo oracula. Qualia flexile officium neque, dea avis auro edidit superba si nunc ferunt? Noscar crura quae fortius fores Pleionesque auras facta summorum oracula terra figura. Misit ubi, ait oculis illa faciem, nunc dolor constitit et. Et sequuntur certae parentem corpora generis decrescunt metu caligine coniunx. Infirmis per per in Haemoniam caede atque est obtulimus alumnae. Mille sucosque Procrusten levis cur ad discedite rupit cuncti domum sit, portibus aegre nox ramis temptemus et sitim ? Huic unda et nondum dedit, Aeginae omnia etiamnum picto utrimque est inpulsu vacuae iam suam ingenio videoque, intellegit. Diem totidemque fugiunt , tibi editus. Errat Enipeus invecta Coniunx satus reficisque atque , autumni, et iuvencae nunc. Nostra iste sub praedaeque, ad praesuta in ulla tubicen Ascanii conplentur quin florem ponit iustis. A ignes leonem dolore ab omni exercita Placidum modo habetis Ei et dominae durescit ad Est ut Illic iuvenem pulvereumque tanta potuissent Quod ferre, vir robore foribus. Nunc mens mollis, tristis poenas tempestiva miracula. Quae aliqua, consiliis, ordine erectos desuetudine nondum genuit, et fecunda fatus. Instruitur iam mollis patriae inposita dictis, qui deus congerie, turbata! Manu cur palaestrae dumque? ```Bash tab= !/bin/bash STR=\"Hello World!\" echo $STR ```C tab= #include int main(void) { printf( hello, world\\n ); } ```C++ tab= include int main() { std::cout \"Hello, world!\\n\"; return 0; } ``` ```C# tab= using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello, world!\"); } }","title":"About"},{"location":"about/#possent-deserta","text":"","title":"Possent deserta"},{"location":"about/#pro-pertimuitque-paravi-arce-pavidus","text":"QSG Lorem markdownum quae hospitium traxit reflectunt de quam vivere crederet fingetur labefecit supplice velat, nova quique captus capillos glorior? Animo cur patriam quondam iacto et imagine violentia, Cerberei. Correctis nimbis ! Nomenque talia deo inclamare vultu sospite in pedis condita merui verbis pennis tumuerunt fecunda. Probat Achilles oves Clymeneia spretarumque sole iamque loqui solvit rapuere invitas. if (graymail_time.pad_drive(ripcording, media_dslam - cmyk_daemon + drm, room)) { biosShortcut.dma_isp(icqClickDongle.megapixel_pipeline(hyper_bus, recursive_soap), flood); circuit = disk_ad_remote; consoleDuplex.balancePageOnline *= finder_jquery_ppm.primaryAjax( bar_drop_file, gate_kindle.runtime(3, 5, 24), network_page_bankruptcy.website_ascii(marketing, ip_vpn_spooling, mouse_file)); } system = kvm_technology_hyper; activex_url_raid += 22; if (spoofing) { flash_io(express_terabyte, 5); duplexMouse += multiplatform_trackball_hard; modem_exploit = impactInfringement.box.bar(rdfMediaVirtualization, software, queryUat); } if (server_optical gt; trimPci(null_compiler_raster, -5)) { disk_scan_bank(91, warm); multimedia_optical.jpeg = miniInternic; android_wysiwyg_commercial = iterationDocumentData; }","title":"Pro pertimuitque paravi arce pavidus"},{"location":"about/#iacuit-deprensi-dolentem-bacchi","text":"Est modum reperta coniecto succedit; quam armenta viseret genus committi usque; non, per marmor recessus heros. Amborum cum fuisset litora aequore desint, scopulum postquam nihil. Tormenti fuga est maior, ubi galeae Parnasia; primos. Notum longas breviore, tigres antris, in trahi versus? Est guttura, resides et latet quamquam obsceno, in flatuque. prom -= multithreading; animatedPointVci = google_dsl_code; kilohertz_honeypot_lun = internetClock * checksum + full(dslam, multitasking_domain_proxy.keyBrouter(sprite_safe_interface, edutainmentCableBar, domain));","title":"Iacuit deprensi dolentem Bacchi"},{"location":"about/#aut-plena-neptunus-lustratum-spargit-domus-invidiosior","text":"Cannis labant voluptas. Leto modo corpus aspergine veribus mactatur et et flamine urnam vacuas bracchia rudis Aonios densior. Gesserit tenet alto canamus sit medios corbe, dictis subiecta est etiam et servatusque. Curva Coeranon ferro remansit ille potuit, quaterque vereri.","title":"Aut plena Neptunus lustratum spargit domus invidiosior"},{"location":"about/#forcipe-imagine-colebat-aut-utraque-rates-litus","text":"Quod Marte quos naribus, contra, Amathusiacasque quoque in lupi pars in non summum, in. Hos ecce!","title":"Forcipe imagine colebat aut utraque rates litus"},{"location":"about/#et-fallit-referre-siccat-subederat-tortoque-viva","text":"Animae meos sic spectacula ignis retentis fines: laevam declivia iussa faciendae est teneri denique volentem sententia totam. Sustinuit per timor fuit precatur obruerat leones mansit Minos condidit Clymeneque sibi necopinum? Unus quam, per satyros discedere Amyclide mihi concussaque rorantia tamen oculis aere. Mater armis cupio pertimuitque veri obstantia condidit , ibi vel cacumine et, quem! Saltus ore rigidis arcum, prohibent, hinc in soror corpore reddere? Haec eripitur, aristis arma numina: illa sparsas, ex sed emittite nondum ignibus. Modo labori in edax gaudetque inter Aventino medullas parvo legit coloribus fervet. Iamque adstringit regnumque flexit longum. Est erat artus et noctis pateret saeviat puto moriens, mordetur. Parenti pati una aliquis dedit cognoscenda glorior armis cum ; nec. Rapacibus obscuram inde ruit illa ait inque, utque arvis a alter gravis indignatur adversaque barbam; integer, mutato.","title":"Et fallit referre siccat subederat tortoque viva"},{"location":"about/#tab1-tab2","text":"[ Content1 ] [ Content2 ] Download this file a fenced block - a fenced block a fenced block Another paragraph. Application Description Pickup Test Desc 127.0.0.1 localhost.com 1 2 #!/usr/bin/python import tensorflow as tf Sample NOTE test test Sample ABSTRACT test test Sample INFO test test Sample TIP test test Sample SUCCESS test test Sample QUESTION test test Sample WARNING test test Sample FAILURE test test Sample DANGER test test Sample BUG test test Sample EXAMPLE test test Sample QUOTE test test ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pickup needs to identify the necessary permission levels to be granted to the employees and any security vulnerabilities. Cameron is a senior manager at Pickup who is responsible for resolving these issues using WSO2 IS. Alex is a junior manager attending to day-to-day tasks and Rowan is the HR manager.","title":"[ Tab1 | Tab2 ]"},{"location":"about/#prerequisites","text":"Download and install Oracle Java SE Development Kit (JDK) version 1.7.* or 1.8.","title":"Prerequisites"},{"location":"about/#deploying-the-sample","text":"","title":"Deploying the Sample"},{"location":"about/#trying-the-sample","text":"","title":"Trying the Sample"},{"location":"about/#plura-obductos-superest-neque-pedasus-ursaque-repetunt","text":"Totosque torum , quae beati, et gestamina mugitu mihi Notum et. Laudatissima per veteres Procne vires. Regentis abdidit lyram sim residentem adsuetasque Indigetes illis, gravidis aequor confundit vult captantia a famulis, ipso. Colonis decerpsit, deus perdet; nam ut perque et erat nostra animam tam sine inplicat? Nec canit cunctisque et equae; mihi parte fertur robora recurrunt circuit in suae aves. Utque Aesacon Peneia victarum, ora sensi poenaque etiam putavi, et veniam: iuvenum exclamat, hospitium natura. Nunc datus, nec fertur arcet, osse super e aderant doque virgo aestus cecinisse recentia, ab? Lacertis orbem, plus ante ipso omnes est Psamathen contigerat echidnae.","title":"Plura obductos superest neque Pedasus ursaque repetunt"},{"location":"about/#qui-erumpit-apertum-invidiae","text":"Serta potuissent madidas ratione que videt structa crabronis in verba despicit. Adsuerat dignissima superest coloque sidera mille cupidine tenet sororem, succiduo oracula. Qualia flexile officium neque, dea avis auro edidit superba si nunc ferunt? Noscar crura quae fortius fores Pleionesque auras facta summorum oracula terra figura. Misit ubi, ait oculis illa faciem, nunc dolor constitit et. Et sequuntur certae parentem corpora generis decrescunt metu caligine coniunx. Infirmis per per in Haemoniam caede atque est obtulimus alumnae. Mille sucosque Procrusten levis cur ad discedite rupit cuncti domum sit, portibus aegre nox ramis temptemus et sitim ? Huic unda et nondum dedit, Aeginae omnia etiamnum picto utrimque est inpulsu vacuae iam suam ingenio videoque, intellegit. Diem totidemque fugiunt , tibi editus.","title":"Qui erumpit apertum invidiae"},{"location":"about/#errat-enipeus-invecta","text":"Coniunx satus reficisque atque , autumni, et iuvencae nunc. Nostra iste sub praedaeque, ad praesuta in ulla tubicen Ascanii conplentur quin florem ponit iustis. A ignes leonem dolore ab omni exercita Placidum modo habetis Ei et dominae durescit ad Est ut Illic iuvenem pulvereumque tanta potuissent Quod ferre, vir robore foribus. Nunc mens mollis, tristis poenas tempestiva miracula. Quae aliqua, consiliis, ordine erectos desuetudine nondum genuit, et fecunda fatus. Instruitur iam mollis patriae inposita dictis, qui deus congerie, turbata! Manu cur palaestrae dumque? ```Bash tab=","title":"Errat Enipeus invecta"},{"location":"about/#binbash","text":"STR=\"Hello World!\" echo $STR ```C tab= #include int main(void) { printf( hello, world\\n ); } ```C++ tab=","title":"!/bin/bash"},{"location":"about/#include","text":"int main() { std::cout \"Hello, world!\\n\"; return 0; } ``` ```C# tab= using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello, world!\"); } }","title":"include "},{"location":"architecture/","text":"Architecture and Process Flow WSO2 IS is a product built on top of WSO2 Carbon. Based on the OSGi specification, it enables easy customization and extension through its componentized architecture. Watch the following video for a quick overview of the process flow of the Identity Server architecture and how the various components interact with each other. Authentication Framework The following are the authenticator types in the authentication framework. Inbound Authenticators The responsibility of inbound authenticators is to identify and parse all the incoming authentication requests and then build the corresponding response. A given inbound authenticator has two parts. Request Processor Response Builder For each protocol supported by WSO2 Identity Server, there should be an inbound authenticator. This architecture component includes inbound authenticators for Security Assertion Markup Language (SAML) 2.0 , OpenID Connect , OAuth 2.0 , and WS-Federation (passive) . In other words, the responsibility of the SAML 2.0 request processor is to accept a SAML request from a service provider, validate the SAML request and then build a common object model understood by the authentication framework and handover the request to it. The responsibility of the SAML response builder is to accept a common object model from the authentication framework and build a SAML response out of it. Both the request processors and the response builders are protocol aware, while the authentication framework is not coupled to any protocol. Local Authenticators The responsibility of the local authenticators is to authenticate the user with locally available credentials. This can be either user name/password or even IWA (Integrated Windows Authentication). Local authenticators are decoupled from the Inbound Authenticators. Once the initial request is handed over to the authentication framework from an inbound authenticator, the authentication framework talks to the service provider configuration component to find the set of local authenticators registered with the service provider corresponding to the current authentication request. Once the local authentication is successfully completed, the local authenticator will notify the framework. The framework will now decide no more authentication is needed and hand over the control to the corresponding response builder of the inbound authenticator. You can develop your own local authenticators and plug them into the Identity Server. Outbound/Federated Authenticators The responsibility of the federated authenticators is to authenticate the user with an external system. This can be with Facebook, Google, Yahoo, LinkedIn, Twitter, Salesforce or any other identity provider. Federated authenticators are decoupled from the Inbound Authenticators. Once the initial request is handed over to the authentication framework from an inbound authenticator, the authentication framework talks to the service provider configuration component to find the set of federated authenticators registered with the service provider corresponding to the current authentication request. A federated authenticator has no value unless it is associated with an identity provider. The Identity Server out-of-the-box supports Security Assertion Markup Language (SAML) 2.0, OpenID Connect, OAuth 2.0, and WS-Federation (passive). The SAML 2 .0 federated authenticator itself has no value. It has to be associated with an Identity Provider. Google Apps can be an identity provider - with the SAML 2.0 federated authenticator. This federated authenticator knows how to generate a SAML request to the Google Apps and process a SAML response from it. There are two parts in a federated authenticator. Request Builder Response Processor Once the federation authentication is successfully completed, the federated authenticator will notify the authentication framework. The framework will now decide no more authentication is needed and hand over the control to the corresponding response builder of the inbound authenticator. Both the request builder and the response processor are protocol aware while the authentication framework is not coupled to any protocol. You can develop your own federated authenticators and plug them into the Identity Server. Multi-Option Authenticators The service provider can define how to authenticate users at the Identity Server, for authentication requests initiated by it. While doing that, each service provider can pick more than one authenticator to allow end users to get multiple login options. This can be a combination of local authenticators and federated authenticators. Multi-Factor Authenticators The service provider can define how to authenticate users at the Identity Server, for authentication requests initiated by it. While doing that, each service provider can define multiple steps and for each step it can pick more than one authenticator. The authentication framework tracks all the authenticators in each step and proceeds to the next step only if the user authenticates successfully in the current step. It is an AND between steps, while it is an OR between the authenticators in a given step. Provisioning Framework The following are the provisioning components available in the provisioning framework. Inbound provisioning Inbound provisioning focuses on how to provision users to the Identity Server. Out-of-the-box, the Identity Server supports inbound provisioning via a Simple Object Access Protocol (SOAP) based API as well as the System for Cross-domain Identity Management (SCIM) 1.1 API. Both the APIs support HTTP Basic Authentication. If you invoke the provisioning API with Basic Authentication credentials, then where to provision the user (to which user store) will be decided based on the inbound provisioning configuration of the resident service provider. The SCIM API also supports OAuth 2.0. If the user authenticates to the SCIM API with OAuth credentials, then the system will load the configuration corresponding to the service provider who owns the OAuth client id. If you plan to invoke the SCIM API via a web application or a mobile application, we would highly recommend you to use OAuth instead of Basic Authentication. You simply need to register your application as a service provider in Identity Server and then generate OAuth keys. Just-in-time provisioning Just-in-time (JIT) provisioning talks about how to provision users to the Identity Server at the time of federated authentication. A service provider initiates the authentication request, the user gets redirected to the Identity Server and then Identity Server redirects the user to an external identity provider for authentication. Just-in-time provisioning gets triggered in such a scenario when the Identity Server receives a positive authentication response from the external identity provider. The Identity Server will provision the user to its internal user store with the user claims from the authentication response. You configure JIT provisioning against an identity provider - not against service providers. Whenever you associate an identity provider with a service provider for outbound authentication, if the JIT provisioning is enabled for that particular identity provider, then the users from the external identity provider will be provisioned into the Identity Server's internal user store. In the JIT provisioning configuration you can also pick the provisioning user store. JIT provisioning happens while in the middle of an authentication flow. The provisioning can happen in a blocking mode or in a non-blocking mode. In the blocking mode, the authentication flow will be blocked till the provisioning finishes - while in the non-blocking mode, provisioning happens in a different thread. Outbound provisioning Outbound provisioning talks about provisioning users to external systems. This can be initiated by any of the following. Inbound provisioning request (initiated by a service provider or the resident service provider) JIT provisioning (initiated by a service provider) Adding a user via the management console (initiated by the resident service provider) Assigning a user to a provisioning role (initiated by the resident service provider) WSO2 Identity Server supports outbound provisioning with the following connectors. You need to configure one or more outbound provisioning connectors with a given identity provider, and associate the identity provider with a service provider. All the provisioning requests must be initiated by a service provider - and will be provisioned to all the identity providers configured in the outbound provisioning configuration of the corresponding service provider. SCIM SPML SOAP Google Apps provisioning API Salesforce provisioning API Components Following are the components pertaining to the architecture of the WSO2 Identity Server, which are depicted in the above figure and video. Service Providers Description A Service Provider (SP) is an entity that provides Web services. A service provider relies on a trusted Identity Provider (IdP) for authentication and authorization. In this case, the Identity Server acts as the IdP and does the task of authenticating and authorizing the user of the service provider. Salesforce and Google Apps are examples of service providers and are used as such in this case. Related Links For more informatino on how to add an SP to WSO2 IS, see Adding and Configuring a Service Provider . Process Flow A user of the SP attempts to log into the SPs application. The service provider sends an authentication request to the Identity Server. This request is met by the Inbound Authentication component of the Identity Server and comes in one of the following forms. SAML SSO OAuth/OpenID Connect Passive STS The service provider receives the authentication confirmation from the Identity Server once it follows all the specified processes required in order to authenticate the SP's user. Additionally, if a user registers in the service provider's application, a Simple Object Access Protocol (SOAP) or System for Cross-domain Identity Management (SCIM) request can be sent to the Identity Server. The request is met by the Inbound Provisioning component of the Identity Server. Inbound Authentication Authentication Framework Local Authenticators Federated Authenticators Identity Providers Provisioning Framework Authroization Manager IDP and SP Configurations Inbound Provisioning User Store Manager Claim Manager XACML Auditing Outbound Provisioning Related Links For further reading about the architecture in an Identity and Access Management solution, see the following article: Identity Architect Ground Rules: Ten IAM Design Principles .","title":"User Management Architecture"},{"location":"architecture/#architecture-and-process-flow","text":"WSO2 IS is a product built on top of WSO2 Carbon. Based on the OSGi specification, it enables easy customization and extension through its componentized architecture. Watch the following video for a quick overview of the process flow of the Identity Server architecture and how the various components interact with each other.","title":"Architecture and Process Flow"},{"location":"architecture/#authentication-framework","text":"The following are the authenticator types in the authentication framework.","title":"Authentication Framework"},{"location":"architecture/#inbound-authenticators","text":"The responsibility of inbound authenticators is to identify and parse all the incoming authentication requests and then build the corresponding response. A given inbound authenticator has two parts. Request Processor Response Builder For each protocol supported by WSO2 Identity Server, there should be an inbound authenticator. This architecture component includes inbound authenticators for Security Assertion Markup Language (SAML) 2.0 , OpenID Connect , OAuth 2.0 , and WS-Federation (passive) . In other words, the responsibility of the SAML 2.0 request processor is to accept a SAML request from a service provider, validate the SAML request and then build a common object model understood by the authentication framework and handover the request to it. The responsibility of the SAML response builder is to accept a common object model from the authentication framework and build a SAML response out of it. Both the request processors and the response builders are protocol aware, while the authentication framework is not coupled to any protocol.","title":"Inbound Authenticators"},{"location":"architecture/#local-authenticators","text":"The responsibility of the local authenticators is to authenticate the user with locally available credentials. This can be either user name/password or even IWA (Integrated Windows Authentication). Local authenticators are decoupled from the Inbound Authenticators. Once the initial request is handed over to the authentication framework from an inbound authenticator, the authentication framework talks to the service provider configuration component to find the set of local authenticators registered with the service provider corresponding to the current authentication request. Once the local authentication is successfully completed, the local authenticator will notify the framework. The framework will now decide no more authentication is needed and hand over the control to the corresponding response builder of the inbound authenticator. You can develop your own local authenticators and plug them into the Identity Server.","title":"Local Authenticators"},{"location":"architecture/#outboundfederated-authenticators","text":"The responsibility of the federated authenticators is to authenticate the user with an external system. This can be with Facebook, Google, Yahoo, LinkedIn, Twitter, Salesforce or any other identity provider. Federated authenticators are decoupled from the Inbound Authenticators. Once the initial request is handed over to the authentication framework from an inbound authenticator, the authentication framework talks to the service provider configuration component to find the set of federated authenticators registered with the service provider corresponding to the current authentication request. A federated authenticator has no value unless it is associated with an identity provider. The Identity Server out-of-the-box supports Security Assertion Markup Language (SAML) 2.0, OpenID Connect, OAuth 2.0, and WS-Federation (passive). The SAML 2 .0 federated authenticator itself has no value. It has to be associated with an Identity Provider. Google Apps can be an identity provider - with the SAML 2.0 federated authenticator. This federated authenticator knows how to generate a SAML request to the Google Apps and process a SAML response from it. There are two parts in a federated authenticator. Request Builder Response Processor Once the federation authentication is successfully completed, the federated authenticator will notify the authentication framework. The framework will now decide no more authentication is needed and hand over the control to the corresponding response builder of the inbound authenticator. Both the request builder and the response processor are protocol aware while the authentication framework is not coupled to any protocol. You can develop your own federated authenticators and plug them into the Identity Server.","title":"Outbound/Federated Authenticators"},{"location":"architecture/#multi-option-authenticators","text":"The service provider can define how to authenticate users at the Identity Server, for authentication requests initiated by it. While doing that, each service provider can pick more than one authenticator to allow end users to get multiple login options. This can be a combination of local authenticators and federated authenticators.","title":"Multi-Option Authenticators"},{"location":"architecture/#multi-factor-authenticators","text":"The service provider can define how to authenticate users at the Identity Server, for authentication requests initiated by it. While doing that, each service provider can define multiple steps and for each step it can pick more than one authenticator. The authentication framework tracks all the authenticators in each step and proceeds to the next step only if the user authenticates successfully in the current step. It is an AND between steps, while it is an OR between the authenticators in a given step.","title":"Multi-Factor Authenticators"},{"location":"architecture/#provisioning-framework","text":"The following are the provisioning components available in the provisioning framework.","title":"Provisioning Framework"},{"location":"architecture/#inbound-provisioning","text":"Inbound provisioning focuses on how to provision users to the Identity Server. Out-of-the-box, the Identity Server supports inbound provisioning via a Simple Object Access Protocol (SOAP) based API as well as the System for Cross-domain Identity Management (SCIM) 1.1 API. Both the APIs support HTTP Basic Authentication. If you invoke the provisioning API with Basic Authentication credentials, then where to provision the user (to which user store) will be decided based on the inbound provisioning configuration of the resident service provider. The SCIM API also supports OAuth 2.0. If the user authenticates to the SCIM API with OAuth credentials, then the system will load the configuration corresponding to the service provider who owns the OAuth client id. If you plan to invoke the SCIM API via a web application or a mobile application, we would highly recommend you to use OAuth instead of Basic Authentication. You simply need to register your application as a service provider in Identity Server and then generate OAuth keys.","title":"Inbound provisioning"},{"location":"architecture/#just-in-time-provisioning","text":"Just-in-time (JIT) provisioning talks about how to provision users to the Identity Server at the time of federated authentication. A service provider initiates the authentication request, the user gets redirected to the Identity Server and then Identity Server redirects the user to an external identity provider for authentication. Just-in-time provisioning gets triggered in such a scenario when the Identity Server receives a positive authentication response from the external identity provider. The Identity Server will provision the user to its internal user store with the user claims from the authentication response. You configure JIT provisioning against an identity provider - not against service providers. Whenever you associate an identity provider with a service provider for outbound authentication, if the JIT provisioning is enabled for that particular identity provider, then the users from the external identity provider will be provisioned into the Identity Server's internal user store. In the JIT provisioning configuration you can also pick the provisioning user store. JIT provisioning happens while in the middle of an authentication flow. The provisioning can happen in a blocking mode or in a non-blocking mode. In the blocking mode, the authentication flow will be blocked till the provisioning finishes - while in the non-blocking mode, provisioning happens in a different thread.","title":"Just-in-time provisioning"},{"location":"architecture/#outbound-provisioning","text":"Outbound provisioning talks about provisioning users to external systems. This can be initiated by any of the following. Inbound provisioning request (initiated by a service provider or the resident service provider) JIT provisioning (initiated by a service provider) Adding a user via the management console (initiated by the resident service provider) Assigning a user to a provisioning role (initiated by the resident service provider) WSO2 Identity Server supports outbound provisioning with the following connectors. You need to configure one or more outbound provisioning connectors with a given identity provider, and associate the identity provider with a service provider. All the provisioning requests must be initiated by a service provider - and will be provisioned to all the identity providers configured in the outbound provisioning configuration of the corresponding service provider. SCIM SPML SOAP Google Apps provisioning API Salesforce provisioning API","title":"Outbound provisioning"},{"location":"architecture/#components","text":"Following are the components pertaining to the architecture of the WSO2 Identity Server, which are depicted in the above figure and video.","title":"Components"},{"location":"architecture/#service-providers","text":"Description A Service Provider (SP) is an entity that provides Web services. A service provider relies on a trusted Identity Provider (IdP) for authentication and authorization. In this case, the Identity Server acts as the IdP and does the task of authenticating and authorizing the user of the service provider. Salesforce and Google Apps are examples of service providers and are used as such in this case. Related Links For more informatino on how to add an SP to WSO2 IS, see Adding and Configuring a Service Provider . Process Flow A user of the SP attempts to log into the SPs application. The service provider sends an authentication request to the Identity Server. This request is met by the Inbound Authentication component of the Identity Server and comes in one of the following forms. SAML SSO OAuth/OpenID Connect Passive STS The service provider receives the authentication confirmation from the Identity Server once it follows all the specified processes required in order to authenticate the SP's user. Additionally, if a user registers in the service provider's application, a Simple Object Access Protocol (SOAP) or System for Cross-domain Identity Management (SCIM) request can be sent to the Identity Server. The request is met by the Inbound Provisioning component of the Identity Server.","title":"Service Providers"},{"location":"architecture/#inbound-authentication","text":"","title":"Inbound Authentication"},{"location":"architecture/#authentication-framework_1","text":"","title":"Authentication Framework"},{"location":"architecture/#local-authenticators_1","text":"","title":"Local Authenticators"},{"location":"architecture/#federated-authenticators","text":"","title":"Federated Authenticators"},{"location":"architecture/#identity-providers","text":"","title":"Identity Providers"},{"location":"architecture/#provisioning-framework_1","text":"","title":"Provisioning Framework"},{"location":"architecture/#authroization-manager","text":"","title":"Authroization Manager"},{"location":"architecture/#idp-and-sp-configurations","text":"","title":"IDP and SP Configurations"},{"location":"architecture/#inbound-provisioning_1","text":"","title":"Inbound Provisioning"},{"location":"architecture/#user-store-manager","text":"","title":"User Store Manager"},{"location":"architecture/#claim-manager","text":"","title":"Claim Manager"},{"location":"architecture/#xacml","text":"","title":"XACML"},{"location":"architecture/#auditing","text":"","title":"Auditing"},{"location":"architecture/#outbound-provisioning_1","text":"Related Links For further reading about the architecture in an Identity and Access Management solution, see the following article: Identity Architect Ground Rules: Ten IAM Design Principles .","title":"Outbound Provisioning"},{"location":"product_overview/","text":"Product Overview Introduction As an enterprise's applications, services, and API adoptions grow, managing identities (such as employees, vendors, partners, and customers) across internal, shared, and SaaS services becomes a significant challenge. The WSO2 Identity Server (WSO2 IS) is a product that can meet this challenge and also provide options to solve identity problems you may encounter in future. WSO2 IS is fully open source and is released under Apache Software License Version 2.0 , one of the most business-friendly licenses available today. Common Use Cases Identity and access management (IAM) directly influences the security and productivity of an organization and enforces consistency in security policies across the organization. IAMs are particularly advantageous when complying with rules and regulations enforced in some critical domains by governments. This can also be a means to provide access to resources to outside parties without compromising security. A system that uses a proper IAM solution is easier to audit. An IAM system would typically have the following. User stores and directories Authentication of users Authorization of users Single sign-on Provisioning Access delegation Password reset Self-registration dAccount locking","title":"Developer Guide"},{"location":"product_overview/#product-overview","text":"","title":"Product Overview"},{"location":"product_overview/#introduction","text":"As an enterprise's applications, services, and API adoptions grow, managing identities (such as employees, vendors, partners, and customers) across internal, shared, and SaaS services becomes a significant challenge. The WSO2 Identity Server (WSO2 IS) is a product that can meet this challenge and also provide options to solve identity problems you may encounter in future. WSO2 IS is fully open source and is released under Apache Software License Version 2.0 , one of the most business-friendly licenses available today.","title":"Introduction"},{"location":"product_overview/#common-use-cases","text":"Identity and access management (IAM) directly influences the security and productivity of an organization and enforces consistency in security policies across the organization. IAMs are particularly advantageous when complying with rules and regulations enforced in some critical domains by governments. This can also be a means to provide access to resources to outside parties without compromising security. A system that uses a proper IAM solution is easier to audit. An IAM system would typically have the following. User stores and directories Authentication of users Authorization of users Single sign-on Provisioning Access delegation Password reset Self-registration dAccount locking","title":"Common Use Cases"}]}